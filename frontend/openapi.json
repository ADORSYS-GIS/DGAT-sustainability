{
  "openapi": "3.0.3",
  "info": {
    "title": "Assessment System API",
    "description": "A comprehensive API for managing assessments, submissions, and reviews in a sustainability assessment system.\n\n## Authentication\nAll endpoints require JWT authentication. Include the token in the Authorization header:\n`Authorization: Bearer <your-jwt-token>`\n\n## Versioning\nThe API supports response versioning to track changes and resolve conflicts.\n",
    "contact": {
      "name": "Assessment System Team",
      "email": "support@assessment-system.com"
    },
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    },
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "http://localhost:3001/api",
      "description": "Production server"
    },
    {
      "url": "http://localhost:3001/api",
      "description": "Staging server"
    },
    {
      "url": "http://localhost:3001/api",
      "description": "Development server"
    }
  ],
  "security": [
    {
      "BearerAuth": []
    }
  ],
  "paths": {
    "/health": {
      "get": {
        "tags": ["Health"],
        "summary": "Health check",
        "description": "Basic health check endpoint",
        "operationId": "health_check",
        "responses": {
          "200": {
            "description": "Service is healthy",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_200"
                }
              }
            }
          }
        }
      }
    },
    "/questions": {
      "get": {
        "tags": ["Questions"],
        "summary": "List questions",
        "description": "Get all questions",
        "responses": {
          "200": {
            "description": "List of questions with their revisions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QuestionListWithRevisionsResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "tags": ["Questions"],
        "summary": "Create question",
        "description": "Create a new question (Admin only)",
        "operationId": "create_question",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateQuestionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Question created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QuestionResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/questions/{question_id}": {
      "get": {
        "tags": ["Questions"],
        "summary": "Get question",
        "description": "Get specific question with all revisions or a specific revision",
        "operationId": "get_question",
        "parameters": [
          {
            "name": "question_id",
            "in": "path",
            "description": "Question ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "revision_id",
            "in": "query",
            "description": "Specific revision ID to retrieve (optional)",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "language",
            "in": "query",
            "description": "Language for content",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Question details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QuestionWithRevisionsResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "tags": ["Questions"],
        "summary": "Update question",
        "description": "Update a question (Admin only). Include question_revision_id for optimistic locking.",
        "operationId": "update_question",
        "parameters": [
          {
            "name": "question_id",
            "in": "path",
            "description": "Question ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "question_revision_id",
            "in": "query",
            "description": "Current revision ID for optimistic locking",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateQuestionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Question updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QuestionResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "description": "Conflict - revision mismatch",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/questions/revisions/{question_revision_id}": {
      "delete": {
        "tags": ["Questions"],
        "summary": "Delete question revision",
        "description": "Delete a question revision (Admin only). Requires question_revision_id as path parameter.",
        "operationId": "delete_question_revision",
        "parameters": [
          {
            "name": "question_revision_id",
            "in": "path",
            "description": "Question Revision ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Question revision deleted successfully"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "description": "Conflict - revision mismatch",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/assessments": {
      "get": {
        "tags": ["Assessments"],
        "summary": "List assessments (org-scoped)",
        "description": "Get all draft and submitted assessments for the current user's organization. Accessible to both org_admin and org_user.",
        "operationId": "list_assessments",
        "parameters": [
          {
            "name": "language",
            "in": "query",
            "description": "Language for content",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of assessments",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssessmentListResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "tags": ["Assessments"],
        "summary": "Create assessment (org-scoped)",
        "description": "Create a new draft assessment for the current user's organization. Only accessible to org_admin.",
        "operationId": "create_assessment",
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "language": {
                    "type": "string",
                    "default": "en",
                    "description": "Language for the assessment"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Assessment created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssessmentResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/assessments/{assessment_id}": {
      "get": {
        "tags": ["Assessments"],
        "summary": "Get assessment",
        "description": "Get a specific draft assessment",
        "operationId": "get_assessment",
        "parameters": [
          {
            "name": "assessment_id",
            "in": "path",
            "description": "Assessment ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Assessment details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssessmentDetailResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "tags": ["Assessments"],
        "summary": "Update assessment",
        "description": "Update a draft assessment",
        "operationId": "update_assessment",
        "parameters": [
          {
            "name": "assessment_id",
            "in": "path",
            "description": "Assessment ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateAssessmentRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Assessment updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssessmentResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "tags": ["Assessments"],
        "summary": "Delete assessment",
        "description": "Delete a draft assessment",
        "operationId": "delete_assessment",
        "parameters": [
          {
            "name": "assessment_id",
            "in": "path",
            "description": "Assessment ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Assessment deleted successfully"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/assessments/{assessment_id}/submit": {
      "post": {
        "tags": ["Assessments"],
        "summary": "Submit assessment",
        "description": "Submit a draft assessment for review (creates immutable submission)",
        "operationId": "submit_assessment",
        "parameters": [
          {
            "name": "assessment_id",
            "in": "path",
            "description": "Assessment ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Assessment submitted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubmissionResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/assessments/{assessment_id}/responses": {
      "get": {
        "tags": ["Responses"],
        "summary": "List responses",
        "description": "Get all responses for a draft assessment",
        "operationId": "list_responses",
        "parameters": [
          {
            "name": "assessment_id",
            "in": "path",
            "description": "Assessment ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "latest_only",
            "in": "query",
            "description": "Return only latest version of each response",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of responses",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseListResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "tags": ["Responses"],
        "summary": "Create response",
        "description": "Create or update a response to a question",
        "operationId": "create_response",
        "parameters": [
          {
            "name": "assessment_id",
            "in": "path",
            "description": "Assessment ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateResponseRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Response created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/assessments/{assessment_id}/responses/{response_id}": {
      "get": {
        "tags": ["Responses"],
        "summary": "Get response",
        "description": "Get a specific response",
        "operationId": "get_response",
        "parameters": [
          {
            "name": "assessment_id",
            "in": "path",
            "description": "Assessment ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "response_id",
            "in": "path",
            "description": "Response ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Response details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDetailResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "tags": ["Responses"],
        "summary": "Update response",
        "description": "Update a response (creates new version)",
        "operationId": "update_response",
        "parameters": [
          {
            "name": "assessment_id",
            "in": "path",
            "description": "Assessment ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "response_id",
            "in": "path",
            "description": "Response ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateResponseRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Response updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "tags": ["Responses"],
        "summary": "Delete response",
        "description": "Delete a response",
        "operationId": "delete_response",
        "parameters": [
          {
            "name": "assessment_id",
            "in": "path",
            "description": "Assessment ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "response_id",
            "in": "path",
            "description": "Response ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Response deleted successfully"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/assessments/{assessment_id}/responses/{response_id}/history": {
      "get": {
        "tags": ["Responses"],
        "summary": "Get response history",
        "description": "Get all versions of a response",
        "operationId": "get_response_history",
        "parameters": [
          {
            "name": "assessment_id",
            "in": "path",
            "description": "Assessment ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "response_id",
            "in": "path",
            "description": "Response ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Response history",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseHistoryResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/submissions": {
      "get": {
        "tags": ["Submissions"],
        "summary": "List user submissions",
        "description": "Get user's submitted assessments",
        "operationId": "list_user_submissions",
        "parameters": [
          {
            "name": "status",
            "in": "query",
            "description": "Filter by review status",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "pending_review",
                "under_review",
                "approved",
                "rejected",
                "revision_requested"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of user submissions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubmissionListResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/submissions/{submission_id}": {
      "get": {
        "tags": ["Submissions"],
        "summary": "Get submission",
        "description": "Get a specific submission",
        "operationId": "get_submission",
        "parameters": [
          {
            "name": "submission_id",
            "in": "path",
            "description": "Submission ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Submission details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubmissionDetailResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/admin/submissions": {
      "get": {
        "tags": ["Admin"],
        "summary": "List all submissions",
        "description": "Get all submissions for admin review management (Admin only)",
        "operationId": "list_all_submissions",
        "parameters": [
          {
            "name": "status",
            "in": "query",
            "description": "Filter by review status",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "pending_review",
                "under_review",
                "approved",
                "rejected",
                "revision_requested"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of all submissions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminSubmissionListResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/submissions/{submission_id}/reports": {
      "get": {
        "tags": ["Reports"],
        "summary": "List reports",
        "description": "Get all reports for an approved submission",
        "operationId": "list_reports",
        "parameters": [
          {
            "name": "submission_id",
            "in": "path",
            "description": "Submission ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "report_type",
            "in": "query",
            "description": "Filter by report type",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["sustainability", "compliance", "summary", "detailed"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of reports",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportListResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "tags": ["Reports"],
        "summary": "Generate report",
        "description": "Generate a new report for an approved submission",
        "operationId": "generate_report",
        "parameters": [
          {
            "name": "submission_id",
            "in": "path",
            "description": "Submission ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "category": { "type": "string" },
                    "recommendation": { "type": "string" }
                  },
                  "required": ["category", "recommendation"]
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Report generation started",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportGenerationResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/user/reports": {
      "get": {
        "tags": ["Reports"],
        "summary": "Get user reports",
        "description": "Get all reports for the authenticated user",
        "operationId": "get_user_reports",
        "responses": {
          "200": {
            "description": "List of user reports",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportListResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "tags": ["Reports"],
        "summary": "Delete all user reports",
        "description": "Delete all reports for the authenticated user",
        "operationId": "delete_user_reports",
        "responses": {
          "204": {
            "description": "All reports deleted successfully"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/files": {
      "post": {
        "tags": ["Files"],
        "summary": "Upload file",
        "description": "Upload a file",
        "operationId": "upload_file",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/files_body"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "File uploaded successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/files/{file_id}": {
      "get": {
        "tags": ["Files"],
        "summary": "Download file",
        "description": "Download a file",
        "operationId": "download_file",
        "parameters": [
          {
            "name": "file_id",
            "in": "path",
            "description": "File ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "File content",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "tags": ["Files"],
        "summary": "Delete file",
        "description": "Delete a file",
        "operationId": "delete_file",
        "parameters": [
          {
            "name": "file_id",
            "in": "path",
            "description": "File ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "File deleted successfully"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/files/{file_id}/metadata": {
      "get": {
        "tags": ["Files"],
        "summary": "Get file metadata",
        "description": "Get metadata for a file",
        "operationId": "get_file_metadata",
        "parameters": [
          {
            "name": "file_id",
            "in": "path",
            "description": "File ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "File metadata",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileMetadataResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/assessments/{assessment_id}/responses/{response_id}/files": {
      "post": {
        "tags": ["Files"],
        "summary": "Attach file to response",
        "description": "Attach a file to a response",
        "operationId": "attach_file",
        "parameters": [
          {
            "name": "assessment_id",
            "in": "path",
            "description": "Assessment ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "response_id",
            "in": "path",
            "description": "Response ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/response_id_files_body"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "File attached successfully"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/assessments/{assessment_id}/responses/{response_id}/files/{file_id}": {
      "delete": {
        "tags": ["Files"],
        "summary": "Remove file from response",
        "description": "Remove a file from a response",
        "operationId": "remove_file",
        "parameters": [
          {
            "name": "assessment_id",
            "in": "path",
            "description": "Assessment ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "response_id",
            "in": "path",
            "description": "Response ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "file_id",
            "in": "path",
            "description": "File ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "File removed successfully"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/admin/organizations": {
      "get": {
        "summary": "Get all organizations",
        "description": "Retrieve all organizations the current user is a member of",
        "tags": ["Organizations"],
        "responses": {
          "200": {
            "description": "List of organizations",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrganizationResponse"
                  }
                }
              }
            }
          },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "500": { "$ref": "#/components/responses/InternalServerError" }
        }
      },
      "post": {
        "summary": "Create organization",
        "description": "Creates a new organization with the specified details including domains, redirect URL, enabled status, and custom attributes. Requires application admin permissions.",
        "tags": ["Organizations"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrganizationCreateRequest"
              },
              "example": {
                "name": "adorsy51s",
                "domains": [{ "name": "yd5es.com" }],
                "redirectUrl": "http://localhost:5173",
                "enabled": "true",
                "attributes": {
                  "categories": ["environmental"]
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Organization created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationResponse"
                },
                "example": {
                  "id": "org-123-456",
                  "name": "adorsy51s",
                  "domains": ["yd5es.com"],
                  "attributes": {
                    "domains": ["yd5es.com"],
                    "redirect_url": ["http://localhost:5173"],
                    "enabled": ["true"],
                    "categories": ["environmental"]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input data",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" },
                "example": {
                  "error": "Invalid organization data",
                  "message": "Organization name is required"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" },
                "example": {
                  "error": "Insufficient permissions",
                  "message": "Application admin role required to create organizations"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" },
                "example": {
                  "error": "Failed to create organization",
                  "message": "Internal server error occurred"
                }
              }
            }
          }
        }
      }
    },
    "/admin/organizations/{id}": {
      "get": {
        "summary": "Get organization",
        "description": "Retrieve a specific organization by ID",
        "tags": ["Organizations"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" },
            "description": "Organization ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Organization details",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Organization" }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "404": { "$ref": "#/components/responses/NotFound" },
          "500": { "$ref": "#/components/responses/InternalServerError" }
        }
      },
      "put": {
        "summary": "Update organization",
        "description": "Update an existing organization (requires organization management permissions)",
        "tags": ["Organizations"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" },
            "description": "Organization ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrganizationCreateRequest"
              }
            }
          }
        },
        "responses": {
          "204": { "description": "Organization updated successfully" },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "404": { "$ref": "#/components/responses/NotFound" },
          "500": { "$ref": "#/components/responses/InternalServerError" }
        }
      },
      "delete": {
        "summary": "Delete organization",
        "description": "Delete an organization (requires organization management permissions)",
        "tags": ["Organizations"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" },
            "description": "Organization ID"
          }
        ],
        "responses": {
          "204": { "description": "Organization deleted successfully" },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "404": { "$ref": "#/components/responses/NotFound" },
          "500": { "$ref": "#/components/responses/InternalServerError" }
        }
      }
    },
    "/organizations/{id}/members": {
      "get": {
        "summary": "Get organization members",
        "description": "Retrieve all members of an organization",
        "tags": ["Organization Members"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" },
            "description": "Organization ID"
          }
        ],
        "responses": {
          "200": {
            "description": "List of organization members",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/OrganizationMember" }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "404": { "$ref": "#/components/responses/NotFound" },
          "500": { "$ref": "#/components/responses/InternalServerError" }
        }
      },
      "post": {
        "summary": "Add member to organization",
        "description": "Add a new member to an organization (requires organization management permissions)",
        "tags": ["Organization Members"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" },
            "description": "Organization ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/MemberRequest" }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Member added successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationMembership"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "404": { "$ref": "#/components/responses/NotFound" },
          "500": { "$ref": "#/components/responses/InternalServerError" }
        }
      }
    },
    "/admin/organizations/{id}/members/{membership_id}": {
      "delete": {
        "summary": "Remove member from organization",
        "description": "Remove a member from an organization (requires organization management permissions)",
        "tags": ["Organization Members"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" },
            "description": "Organization ID"
          },
          {
            "name": "membership_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" },
            "description": "Membership ID"
          }
        ],
        "responses": {
          "204": { "description": "Member removed successfully" },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "404": { "$ref": "#/components/responses/NotFound" },
          "500": { "$ref": "#/components/responses/InternalServerError" }
        }
      }
    },
    "/api/organizations/{id}/members/{membership_id}/roles": {
      "put": {
        "summary": "Update member roles",
        "description": "Update the roles of an organization member (requires organization management permissions)",
        "tags": ["Organization Members"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" },
            "description": "Organization ID"
          },
          {
            "name": "membership_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" },
            "description": "Membership ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/RoleAssignment" }
            }
          }
        },
        "responses": {
          "204": { "description": "Member roles updated successfully" },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "404": { "$ref": "#/components/responses/NotFound" },
          "500": { "$ref": "#/components/responses/InternalServerError" }
        }
      }
    },
    "/api/organizations/{id}/invitations": {
      "get": {
        "summary": "Get organization invitations",
        "description": "Retrieve all pending invitations for an organization (requires organization management permissions)",
        "tags": ["Organization Invitations"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" },
            "description": "Organization ID"
          }
        ],
        "responses": {
          "200": {
            "description": "List of organization invitations",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrganizationInvitation"
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "404": { "$ref": "#/components/responses/NotFound" },
          "500": { "$ref": "#/components/responses/InternalServerError" }
        }
      },
      "post": {
        "summary": "Create organization invitation",
        "description": "Create a new invitation to join an organization (requires organization management permissions)",
        "tags": ["Organization Invitations"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" },
            "description": "Organization ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/InvitationRequest" }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Invitation created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationInvitation"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "404": { "$ref": "#/components/responses/NotFound" },
          "500": { "$ref": "#/components/responses/InternalServerError" }
        }
      }
    },
    "/api/organizations/{id}/invitations/{invitation_id}": {
      "delete": {
        "summary": "Delete organization invitation",
        "description": "Delete a pending invitation (requires organization management permissions)",
        "tags": ["Organization Invitations"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" },
            "description": "Organization ID"
          },
          {
            "name": "invitation_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" },
            "description": "Invitation ID"
          }
        ],
        "responses": {
          "204": { "description": "Invitation deleted successfully" },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "404": { "$ref": "#/components/responses/NotFound" },
          "500": { "$ref": "#/components/responses/InternalServerError" }
        }
      }
    },
    "/organizations/{id}/org-admin/members": {
      "post": {
        "summary": "Add org user with categories (org admin only)",
        "description": "Add a user to the organization and assign categories (org admin only)",
        "tags": ["Organization Members"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" },
            "description": "Organization ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/OrgAdminMemberRequest" }
            }
          }
        },
        "responses": {
          "201": { "description": "User added successfully" },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "404": { "$ref": "#/components/responses/NotFound" },
          "500": { "$ref": "#/components/responses/InternalServerError" }
        }
      },
      "get": {
        "summary": "List org users with categories (org admin only)",
        "description": "List users in the organization, including their categories (org admin only)",
        "tags": ["Organization Members"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" },
            "description": "Organization ID"
          }
        ],
        "responses": {
          "200": {
            "description": "List of organization members with categories",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "allOf": [
                      { "$ref": "#/components/schemas/OrganizationMember" },
                      {
                        "type": "object",
                        "properties": {
                          "categories": {
                            "type": "array",
                            "items": { "type": "string" }
                          }
                        }
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "404": { "$ref": "#/components/responses/NotFound" },
          "500": { "$ref": "#/components/responses/InternalServerError" }
        }
      }
    },
    "/organizations/{id}/org-admin/members/{member_id}": {
      "delete": {
        "summary": "Remove org user (org admin only)",
        "description": "Remove a user from the organization (org admin only)",
        "tags": ["Organization Members"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" },
            "description": "Organization ID"
          },
          {
            "name": "member_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" },
            "description": "User ID"
          }
        ],
        "responses": {
          "204": { "description": "User removed successfully" },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "404": { "$ref": "#/components/responses/NotFound" },
          "500": { "$ref": "#/components/responses/InternalServerError" }
        }
      }
    },
    "/organizations/{id}/org-admin/members/{member_id}/categories": {
      "put": {
        "summary": "Update org user categories (org admin only)",
        "description": "Update the categories assigned to a user in the organization (org admin only)",
        "tags": ["Organization Members"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" },
            "description": "Organization ID"
          },
          {
            "name": "member_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" },
            "description": "User ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrgAdminMemberCategoryUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "204": { "description": "Categories updated successfully" },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "404": { "$ref": "#/components/responses/NotFound" },
          "500": { "$ref": "#/components/responses/InternalServerError" }
        }
      }
    },
    "/api/organizations/{id}/assessments/results": {
      "get": {
        "summary": "Get aggregated assessment results for an organization",
        "description": "Aggregate all assessment submissions and responses for the given organization. Only accessible to org_admins.",
        "tags": ["Assessments", "Organizations"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" },
            "description": "Organization ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Aggregated assessment results for the organization",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrgAssessmentResults"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "404": { "$ref": "#/components/responses/NotFound" },
          "500": { "$ref": "#/components/responses/InternalServerError" }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Question": {
        "required": ["category", "created_at", "question_id"],
        "type": "object",
        "properties": {
          "question_id": {
            "type": "string",
            "format": "uuid"
          },
          "category": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "QuestionRevision": {
        "required": [
          "created_at",
          "language",
          "latest_revision",
          "question_id",
          "text"
        ],
        "type": "object",
        "properties": {
          "latest_revision": {
            "type": "string",
            "format": "uuid"
          },
          "question_id": {
            "type": "string",
            "format": "uuid"
          },
          "text": {
            "type": "object"
          },
          "weight": {
            "type": "integer"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "CreateQuestionRequest": {
        "required": ["category", "text"],
        "type": "object",
        "properties": {
          "category": {
            "type": "string"
          },
          "text": {
            "type": "object",
            "default": {
              "en": "explain your ecological policies"
            }
          },
          "weight": {
            "type": "integer",
            "default": 1
          }
        }
      },
      "UpdateQuestionRequest": {
        "type": "object",
        "properties": {
          "category": {
            "type": "string"
          },
          "text": {
            "type": "object"
          },
          "weight": {
            "type": "integer"
          }
        }
      },
      "QuestionListResponse": {
        "required": ["questions"],
        "type": "object",
        "properties": {
          "questions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Question"
            }
          }
        }
      },
      "QuestionListWithRevisionsResponse": {
        "required": ["questions"],
        "type": "object",
        "properties": {
          "questions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/QuestionWithRevisionsResponse"
            }
          }
        }
      },
      "QuestionResponse": {
        "required": ["question"],
        "type": "object",
        "properties": {
          "question": {
            "$ref": "#/components/schemas/Question"
          }
        }
      },
      "QuestionWithRevisionsResponse": {
        "required": ["question", "revisions"],
        "type": "object",
        "properties": {
          "question": {
            "$ref": "#/components/schemas/Question"
          },
          "revisions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/QuestionRevision"
            }
          }
        }
      },
      "QuestionRevisionListResponse": {
        "required": ["revisions"],
        "type": "object",
        "properties": {
          "revisions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/QuestionRevision"
            }
          }
        }
      },
      "QuestionRevisionResponse": {
        "required": ["revision"],
        "type": "object",
        "properties": {
          "revision": {
            "$ref": "#/components/schemas/QuestionRevision"
          }
        }
      },
      "Assessment": {
        "required": ["assessment_id", "created_at", "language", "user_id"],
        "type": "object",
        "properties": {
          "assessment_id": {
            "type": "string",
            "format": "uuid"
          },
          "user_id": {
            "type": "string"
          },
          "language": {
            "type": "string",
            "default": "en"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "UpdateAssessmentRequest": {
        "type": "object",
        "properties": {
          "language": {
            "type": "string"
          }
        }
      },
      "AssessmentListResponse": {
        "required": ["assessments"],
        "type": "object",
        "properties": {
          "assessments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Assessment"
            }
          }
        }
      },
      "AssessmentResponse": {
        "required": ["assessment"],
        "type": "object",
        "properties": {
          "assessment": {
            "$ref": "#/components/schemas/Assessment"
          }
        }
      },
      "AssessmentDetailResponse": {
        "required": ["assessment", "questions", "responses"],
        "type": "object",
        "properties": {
          "assessment": {
            "$ref": "#/components/schemas/Assessment"
          },
          "questions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/QuestionRevision"
            }
          },
          "responses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Response"
            }
          }
        }
      },
      "Response": {
        "required": [
          "assessment_id",
          "question_revision_id",
          "response",
          "response_id",
          "updated_at",
          "version"
        ],
        "type": "object",
        "properties": {
          "response_id": {
            "type": "string",
            "format": "uuid"
          },
          "assessment_id": {
            "type": "string",
            "format": "uuid"
          },
          "question_revision_id": {
            "type": "string",
            "format": "uuid"
          },
          "response": {
            "type": "string"
          },
          "version": {
            "type": "integer"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "CreateResponseRequest": {
        "required": ["question_revision_id", "response"],
        "type": "object",
        "properties": {
          "question_revision_id": {
            "type": "string",
            "format": "uuid"
          },
          "response": {
            "type": "string"
          },
          "version": {
            "type": "integer",
            "description": "Version for conflict resolution"
          }
        }
      },
      "UpdateResponseRequest": {
        "required": ["response"],
        "type": "object",
        "properties": {
          "response": {
            "type": "string"
          }
        }
      },
      "ResponseListResponse": {
        "required": ["responses"],
        "type": "object",
        "properties": {
          "responses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Response"
            }
          }
        }
      },
      "ResponseResponse": {
        "required": ["response"],
        "type": "object",
        "properties": {
          "response": {
            "$ref": "#/components/schemas/Response"
          }
        }
      },
      "ResponseDetailResponse": {
        "required": ["files", "question", "response"],
        "type": "object",
        "properties": {
          "response": {
            "$ref": "#/components/schemas/Response"
          },
          "question": {
            "$ref": "#/components/schemas/QuestionRevision"
          },
          "files": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FileMetadata"
            }
          }
        }
      },
      "ResponseHistoryResponse": {
        "required": ["history"],
        "type": "object",
        "properties": {
          "history": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Response"
            }
          }
        }
      },
      "Submission": {
        "required": [
          "assessment_id",
          "content",
          "review_status",
          "submission_id",
          "submitted_at",
          "user_id"
        ],
        "type": "object",
        "properties": {
          "submission_id": {
            "type": "string",
            "format": "uuid"
          },
          "assessment_id": {
            "type": "string",
            "format": "uuid"
          },
          "user_id": {
            "type": "string"
          },
          "content": {
            "$ref": "#/components/schemas/Submission_content"
          },
          "review_status": {
            "type": "string",
            "enum": [
              "pending_review",
              "under_review",
              "approved",
              "rejected",
              "revision_requested"
            ]
          },
          "submitted_at": {
            "type": "string",
            "format": "date-time"
          },
          "reviewed_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        }
      },
      "SubmissionListResponse": {
        "required": ["submissions"],
        "type": "object",
        "properties": {
          "submissions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Submission"
            }
          }
        }
      },
      "SubmissionResponse": {
        "required": ["submission"],
        "type": "object",
        "properties": {
          "submission": {
            "$ref": "#/components/schemas/Submission"
          }
        }
      },
      "SubmissionDetailResponse": {
        "required": ["current_review", "submission"],
        "type": "object",
        "properties": {
          "submission": {
            "$ref": "#/components/schemas/Submission"
          },
          "current_review": {
            "$ref": "#/components/schemas/Review"
          }
        }
      },
      "AdminSubmissionListResponse": {
        "required": ["submissions"],
        "type": "object",
        "properties": {
          "submissions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AdminSubmissionDetail"
            }
          }
        }
      },
      "AdminSubmissionDetail": {
        "required": [
          "assessment_id",
          "content",
          "review_status",
          "submission_id",
          "submitted_at",
          "user_id"
        ],
        "type": "object",
        "properties": {
          "submission_id": {
            "type": "string",
            "description": "Unique submission identifier",
            "format": "uuid"
          },
          "assessment_id": {
            "type": "string",
            "description": "Original assessment that was submitted",
            "format": "uuid"
          },
          "user_id": {
            "type": "string",
            "description": "User who submitted the assessment"
          },
          "content": {
            "$ref": "#/components/schemas/AdminSubmissionDetail_content"
          },
          "review_status": {
            "type": "string",
            "description": "Current review status",
            "enum": [
              "pending_review",
              "under_review",
              "approved",
              "rejected",
              "revision_requested"
            ]
          },
          "submitted_at": {
            "type": "string",
            "description": "Submission timestamp",
            "format": "date-time"
          },
          "reviewed_at": {
            "type": "string",
            "description": "Review completion timestamp",
            "format": "date-time",
            "nullable": true
          }
        }
      },
      "Review": {
        "required": [
          "created_at",
          "review_id",
          "reviewer_id",
          "status",
          "submission_id"
        ],
        "type": "object",
        "properties": {
          "review_id": {
            "type": "string",
            "format": "uuid"
          },
          "submission_id": {
            "type": "string",
            "format": "uuid"
          },
          "reviewer_id": {
            "type": "string"
          },
          "reviewer_email": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "string",
            "enum": ["pending", "in_progress", "completed"]
          },
          "decision": {
            "type": "string",
            "nullable": true,
            "enum": ["approved", "rejected", "revision_requested"]
          },
          "comments": {
            "type": "string",
            "nullable": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "completed_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        }
      },
      "AdminReview": {
        "required": [
          "created_at",
          "review_id",
          "reviewer_email",
          "reviewer_id",
          "status",
          "submission_id",
          "user_email"
        ],
        "type": "object",
        "properties": {
          "review_id": {
            "type": "string",
            "format": "uuid"
          },
          "submission_id": {
            "type": "string",
            "format": "uuid"
          },
          "user_email": {
            "type": "string"
          },
          "reviewer_id": {
            "type": "string"
          },
          "reviewer_email": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": ["pending", "in_progress", "completed"]
          },
          "decision": {
            "type": "string",
            "nullable": true,
            "enum": ["approved", "rejected", "revision_requested"]
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "AdminReviewListResponse": {
        "required": ["reviews"],
        "type": "object",
        "properties": {
          "reviews": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AdminReview"
            }
          }
        }
      },
      "Report": {
        "required": [
          "generated_at",
          "report_id",
          "report_type",
          "status",
          "submission_id"
        ],
        "type": "object",
        "properties": {
          "report_id": {
            "type": "string",
            "format": "uuid"
          },
          "submission_id": {
            "type": "string",
            "format": "uuid"
          },
          "report_type": {
            "type": "string",
            "enum": ["sustainability", "compliance", "summary", "detailed"]
          },
          "status": {
            "type": "string",
            "enum": ["generating", "completed", "failed"]
          },
          "generated_at": {
            "type": "string",
            "format": "date-time"
          },
          "data": {
            "type": "object",
            "nullable": true
          }
        }
      },
      "GenerateReportRequest": {
        "type": "object",
        "properties": {
          "options": {
            "type": "object",
            "nullable": true
          }
        }
      },
      "ReportGenerationResponse": {
        "required": ["report_id", "status"],
        "type": "object",
        "properties": {
          "report_id": {
            "type": "string",
            "format": "uuid"
          },
          "status": {
            "type": "string",
            "enum": ["generating", "completed", "failed"]
          }
        }
      },
      "ReportListResponse": {
        "required": ["reports"],
        "type": "object",
        "properties": {
          "reports": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Report"
            }
          }
        }
      },
      "ReportResponse": {
        "required": ["report"],
        "type": "object",
        "properties": {
          "report": {
            "$ref": "#/components/schemas/Report"
          }
        }
      },
      "FileMetadata": {
        "required": ["file_id", "metadata"],
        "type": "object",
        "properties": {
          "file_id": {
            "type": "string",
            "format": "uuid"
          },
          "metadata": {
            "type": "object",
            "description": "File metadata including filename, size, content type, etc."
          }
        }
      },
      "FileResponse": {
        "required": ["file"],
        "type": "object",
        "properties": {
          "file": {
            "$ref": "#/components/schemas/FileMetadata"
          }
        }
      },
      "FileMetadataResponse": {
        "required": ["file_id", "metadata"],
        "type": "object",
        "properties": {
          "file_id": {
            "type": "string",
            "format": "uuid"
          },
          "metadata": {
            "type": "object"
          }
        }
      },
      "Error": {
        "required": ["error", "message"],
        "type": "object",
        "properties": {
          "error": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "details": {
            "type": "object",
            "nullable": true
          }
        }
      },
      "ValidationError": {
        "required": ["error", "message", "validation_errors"],
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "example": "validation_failed"
          },
          "message": {
            "type": "string",
            "example": "Request validation failed"
          },
          "validation_errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidationError_validation_errors"
            }
          }
        }
      },
      "inline_response_200": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "healthy"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "files_body": {
        "type": "object",
        "properties": {
          "file": {
            "type": "string",
            "format": "binary"
          },
          "metadata": {
            "type": "string",
            "description": "JSON metadata for the file"
          }
        }
      },
      "response_id_files_body": {
        "type": "object",
        "properties": {
          "file_id": {
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "Submission_content_assessment": {
        "type": "object",
        "properties": {
          "assessment_id": {
            "type": "string",
            "format": "uuid",
            "example": "550e8400-e29b-41d4-a716-446655440000"
          },
          "language": {
            "type": "string",
            "example": "en"
          }
        }
      },
      "Submission_content_responses": {
        "type": "object",
        "properties": {
          "question": {
            "type": "string",
            "format": "uuid"
          },
          "response": {
            "type": "string",
            "example": "Our organization has a comprehensive sustainability policy"
          },
          "files": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FileMetadata"
            }
          }
        }
      },
      "Submission_content": {
        "type": "object",
        "properties": {
          "assessment": {
            "$ref": "#/components/schemas/Submission_content_assessment"
          },
          "responses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Submission_content_responses"
            }
          }
        },
        "description": "Immutable snapshot of assessment and all responses"
      },
      "AdminSubmissionDetail_content_responses": {
        "type": "object",
        "properties": {
          "question_text": {
            "type": "string",
            "description": "The actual question text (mapped from question_revision_id)",
            "example": "What is your organization's sustainability policy?"
          },
          "question_category": {
            "type": "string",
            "description": "Question category",
            "example": "Environmental"
          },
          "response": {
            "type": "string",
            "description": "User's response to the question",
            "example": "Our organization has a comprehensive sustainability policy"
          },
          "files": {
            "type": "array",
            "description": "Attached files with complete metadata",
            "items": {
              "$ref": "#/components/schemas/FileMetadata"
            }
          }
        }
      },
      "AdminSubmissionDetail_content": {
        "type": "object",
        "properties": {
          "assessment": {
            "$ref": "#/components/schemas/Submission_content_assessment"
          },
          "responses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AdminSubmissionDetail_content_responses"
            }
          }
        },
        "description": "Immutable snapshot of assessment and all responses with question text"
      },
      "ValidationError_validation_errors": {
        "type": "object",
        "properties": {
          "field": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        }
      },
      "Organization": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique organization identifier"
          },
          "name": { "type": "string", "description": "Organization name" },
          "description": {
            "type": "string",
            "nullable": true,
            "description": "Organization description"
          },
          "country": {
            "type": "string",
            "nullable": true,
            "description": "Organization country"
          },
          "attributes": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": { "type": "string" }
            },
            "description": "Additional organization attributes"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Organization creation timestamp"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Organization last update timestamp"
          }
        },
        "required": ["id", "name"]
      },
      "OrganizationCreateRequest": {
        "type": "object",
        "required": ["name", "domains", "redirectUrl", "enabled"],
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the organization",
            "example": "adorsy51s",
            "minLength": 1,
            "maxLength": 255
          },
          "domains": {
            "type": "array",
            "description": "List of domains associated with the organization",
            "items": { "$ref": "#/components/schemas/OrganizationDomain" },
            "minItems": 1,
            "example": [{ "name": "yd5es.com" }]
          },
          "redirectUrl": {
            "type": "string",
            "description": "The redirect URL for the organization",
            "format": "uri",
            "example": "http://localhost:5173"
          },
          "enabled": {
            "type": "string",
            "description": "Whether the organization is enabled (sent as string)",
            "enum": ["true", "false"],
            "example": "true"
          },
          "attributes": {
            "type": "object",
            "description": "Custom attributes for the organization",
            "additionalProperties": {
              "type": "array",
              "items": { "type": "string" }
            },
            "example": {
              "categories": ["environmental"],
              "industry": ["technology", "sustainability"]
            }
          }
        }
      },
      "OrganizationDomain": {
        "type": "object",
        "required": ["name"],
        "properties": {
          "name": {
            "type": "string",
            "description": "The domain name",
            "format": "hostname",
            "example": "yd5es.com",
            "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?(\\.[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?)*$"
          }
        }
      },
      "OrganizationResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the organization",
            "example": "org-123-456"
          },
          "name": {
            "type": "string",
            "description": "The name of the organization",
            "example": "adorsy51s"
          },
          "domains": {
            "type": "array",
            "description": "List of domain names associated with the organization",
            "items": { "type": "string" },
            "example": ["yd5es.com"]
          },
          "attributes": {
            "type": "object",
            "description": "All attributes including domains, redirect_url, enabled status, and custom attributes",
            "additionalProperties": {
              "type": "array",
              "items": { "type": "string" }
            },
            "example": {
              "domains": ["yd5es.com"],
              "redirect_url": ["http://localhost:5173"],
              "enabled": ["true"],
              "categories": ["environmental"]
            }
          }
        }
      },
      "ErrorResponse": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "description": "Error type or category",
            "example": "Bad Request"
          },
          "message": {
            "type": "string",
            "description": "Detailed error message",
            "example": "Invalid organization data provided"
          }
        }
      },
      "OrganizationMember": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "description": "User identifier" },
          "username": { "type": "string", "description": "Username" },
          "email": {
            "type": "string",
            "format": "email",
            "description": "User email"
          },
          "emailVerified": {
            "type": "boolean",
            "description": "Whether the user's email is verified"
          },
          "firstName": {
            "type": "string",
            "nullable": true,
            "description": "User first name"
          },
          "lastName": {
            "type": "string",
            "nullable": true,
            "description": "User last name"
          },
          "roles": {
            "type": "array",
            "items": { "type": "string" },
            "description": "User roles in the organization"
          },
          "joinedAt": {
            "type": "string",
            "format": "date-time",
            "description": "When the user joined the organization"
          }
        },
        "required": ["id", "username", "email", "roles"]
      },
      "OrganizationMembership": {
        "type": "object",
        "properties": {
          "membership_id": {
            "type": "string",
            "description": "Unique membership identifier"
          },
          "user_id": { "type": "string", "description": "User identifier" },
          "organization_id": {
            "type": "string",
            "description": "Organization identifier"
          },
          "roles": {
            "type": "array",
            "items": { "type": "string" },
            "description": "User roles in the organization"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Membership creation timestamp"
          }
        },
        "required": ["membership_id", "user_id", "organization_id", "roles"]
      },
      "MemberRequest": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "description": "User email to add to the organization"
          },
          "roles": {
            "type": "array",
            "items": { "type": "string" },
            "description": "Roles to assign to the user"
          }
        },
        "required": ["email", "roles"]
      },
      "RoleAssignment": {
        "type": "object",
        "properties": {
          "roles": {
            "type": "array",
            "items": { "type": "string" },
            "description": "New roles to assign to the user"
          }
        },
        "required": ["roles"]
      },
      "OrganizationInvitation": {
        "type": "object",
        "properties": {
          "invitation_id": {
            "type": "string",
            "description": "Unique invitation identifier"
          },
          "organization_id": {
            "type": "string",
            "description": "Organization identifier"
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "Email address of the invited user"
          },
          "roles": {
            "type": "array",
            "items": { "type": "string" },
            "description": "Roles to assign when invitation is accepted"
          },
          "status": {
            "type": "string",
            "enum": ["pending", "accepted", "expired", "cancelled"],
            "description": "Invitation status"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Invitation creation timestamp"
          },
          "expires_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "Invitation expiration timestamp"
          },
          "invited_by": {
            "type": "string",
            "description": "User ID who created the invitation"
          }
        },
        "required": [
          "invitation_id",
          "organization_id",
          "email",
          "roles",
          "status",
          "created_at",
          "invited_by"
        ]
      },
      "InvitationRequest": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "description": "Email address of the user to invite"
          },
          "roles": {
            "type": "array",
            "items": { "type": "string" },
            "description": "Roles to assign when invitation is accepted"
          },
          "expiration": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "Optional invitation expiration timestamp"
          }
        },
        "required": ["email", "roles"]
      },
      "OrgAdminMemberRequest": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "description": "User email to add to the organization"
          },
          "roles": {
            "type": "array",
            "items": { "type": "string" },
            "description": "Roles to assign to the user"
          },
          "categories": {
            "type": "array",
            "items": { "type": "string" },
            "description": "Categories to assign to the user"
          }
        },
        "required": ["email", "roles", "categories"]
      },
      "OrgAdminMemberCategoryUpdateRequest": {
        "type": "object",
        "properties": {
          "categories": {
            "type": "array",
            "items": { "type": "string" },
            "description": "Categories to assign to the user"
          }
        },
        "required": ["categories"]
      },
      "OrgAssessmentResults": {
        "type": "object",
        "properties": {
          "org_id": { "type": "string", "description": "Organization ID" },
          "num_assessments": {
            "type": "integer",
            "description": "Number of assessments in the org"
          },
          "num_submissions": {
            "type": "integer",
            "description": "Number of submissions in the org"
          },
          "category_counts": {
            "type": "object",
            "additionalProperties": { "type": "integer" },
            "description": "Map of category name to number of answers/submissions"
          }
        },
        "required": [
          "org_id",
          "num_assessments",
          "num_submissions",
          "category_counts"
        ]
      },
      "CreateAssessmentRequest": {
        "type": "object",
        "properties": {
          "language": {
            "type": "string",
            "description": "Language for the assessment"
          }
        },
        "required": ["language"]
      }
    },
    "responses": {
      "BadRequest": {
        "description": "Bad Request",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ValidationError"
            }
          }
        }
      },
      "Unauthorized": {
        "description": "Unauthorized",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "Forbidden": {
        "description": "Forbidden",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "NotFound": {
        "description": "Not Found",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "Conflict": {
        "description": "Conflict",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "InternalServerError": {
        "description": "Internal Server Error",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      }
    },
    "parameters": {
      "QuestionId": {
        "name": "question_id",
        "in": "path",
        "description": "Question ID",
        "required": true,
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      },
      "AssessmentId": {
        "name": "assessment_id",
        "in": "path",
        "description": "Assessment ID",
        "required": true,
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      },
      "ResponseId": {
        "name": "response_id",
        "in": "path",
        "description": "Response ID",
        "required": true,
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      },
      "SubmissionId": {
        "name": "submission_id",
        "in": "path",
        "description": "Submission ID",
        "required": true,
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      },
      "ReportId": {
        "name": "report_id",
        "in": "path",
        "description": "Report ID",
        "required": true,
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      },
      "FileId": {
        "name": "file_id",
        "in": "path",
        "description": "File ID",
        "required": true,
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      },
      "Language": {
        "name": "language",
        "in": "query",
        "description": "Language for content",
        "required": false,
        "schema": {
          "type": "string",
          "default": "en"
        }
      }
    },
    "securitySchemes": {
      "BearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}

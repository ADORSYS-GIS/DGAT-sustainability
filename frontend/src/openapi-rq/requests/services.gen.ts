// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from "./core/CancelablePromise";
import { OpenAPI } from "./core/OpenAPI";
import { request as __request } from "./core/request";
import type {
  GetHealthResponse,
  GetQuestionsData,
  GetQuestionsResponse,
  PostQuestionsData,
  PostQuestionsResponse,
  GetQuestionsByQuestionIdData,
  GetQuestionsByQuestionIdResponse,
  PutQuestionsByQuestionIdData,
  PutQuestionsByQuestionIdResponse,
  DeleteQuestionsByQuestionIdData,
  DeleteQuestionsByQuestionIdResponse,
  GetAssessmentsData,
  GetAssessmentsResponse,
  PostAssessmentsData,
  PostAssessmentsResponse,
  GetAssessmentsByAssessmentIdData,
  GetAssessmentsByAssessmentIdResponse,
  PutAssessmentsByAssessmentIdData,
  PutAssessmentsByAssessmentIdResponse,
  DeleteAssessmentsByAssessmentIdData,
  DeleteAssessmentsByAssessmentIdResponse,
  PostAssessmentsByAssessmentIdSubmitData,
  PostAssessmentsByAssessmentIdSubmitResponse,
  GetAssessmentsByAssessmentIdResponsesData,
  GetAssessmentsByAssessmentIdResponsesResponse,
  PostAssessmentsByAssessmentIdResponsesData,
  PostAssessmentsByAssessmentIdResponsesResponse,
  GetAssessmentsByAssessmentIdResponsesByResponseIdData,
  GetAssessmentsByAssessmentIdResponsesByResponseIdResponse,
  PutAssessmentsByAssessmentIdResponsesByResponseIdData,
  PutAssessmentsByAssessmentIdResponsesByResponseIdResponse,
  DeleteAssessmentsByAssessmentIdResponsesByResponseIdData,
  DeleteAssessmentsByAssessmentIdResponsesByResponseIdResponse,
  GetAssessmentsByAssessmentIdResponsesByResponseIdHistoryData,
  GetAssessmentsByAssessmentIdResponsesByResponseIdHistoryResponse,
  GetSubmissionsData,
  GetSubmissionsResponse,
  GetSubmissionsBySubmissionIdData,
  GetSubmissionsBySubmissionIdResponse,
  GetAdminSubmissionsData,
  GetAdminSubmissionsResponse,
  GetSubmissionsBySubmissionIdReportsData,
  GetSubmissionsBySubmissionIdReportsResponse,
  PostSubmissionsBySubmissionIdReportsData,
  PostSubmissionsBySubmissionIdReportsResponse,
  GetReportsByReportIdData,
  GetReportsByReportIdResponse,
  DeleteReportsByReportIdData,
  DeleteReportsByReportIdResponse,
  PostFilesData,
  PostFilesResponse,
  GetFilesByFileIdData,
  GetFilesByFileIdResponse,
  DeleteFilesByFileIdData,
  DeleteFilesByFileIdResponse,
  GetFilesByFileIdMetadataData,
  GetFilesByFileIdMetadataResponse,
  PostAssessmentsByAssessmentIdResponsesByResponseIdFilesData,
  PostAssessmentsByAssessmentIdResponsesByResponseIdFilesResponse,
  DeleteAssessmentsByAssessmentIdResponsesByResponseIdFilesByFileIdData,
  DeleteAssessmentsByAssessmentIdResponsesByResponseIdFilesByFileIdResponse,
} from "./types.gen";

export class HealthService {
  /**
   * Health check
   * Basic health check endpoint
   * @returns inline_response_200 Service is healthy
   * @throws ApiError
   */
  public static getHealth(): CancelablePromise<GetHealthResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/health",
    });
  }
}

export class QuestionsService {
  /**
   * List questions
   * Get all questions with optional filtering. When question_revision_id is provided, returns the question containing that specific revision.
   * @param data The data for the request.
   * @param data.category Filter by question category
   * @param data.language Language for content
   * @returns QuestionListResponse List of questions
   * @throws ApiError
   */
  public static getQuestions(
    data: GetQuestionsData = {},
  ): CancelablePromise<GetQuestionsResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/questions",
      query: {
        category: data.category,
        language: data.language,
      },
      errors: {
        401: "Unauthorized",
        500: "Internal Server Error",
      },
    });
  }

  /**
   * Create question
   * Create a new question (Admin only)
   * @param data The data for the request.
   * @param data.requestBody
   * @returns QuestionResponse Question created successfully
   * @throws ApiError
   */
  public static postQuestions(
    data: PostQuestionsData,
  ): CancelablePromise<PostQuestionsResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/questions",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        400: "Bad Request",
        401: "Unauthorized",
        403: "Forbidden",
        500: "Internal Server Error",
      },
    });
  }

  /**
   * Get question
   * Get specific question with all revisions or a specific revision
   * @param data The data for the request.
   * @param data.questionId Question ID
   * @param data.revisionId Specific revision ID to retrieve (optional)
   * @param data.language Language for content
   * @returns QuestionWithRevisionsResponse Question details
   * @throws ApiError
   */
  public static getQuestionsByQuestionId(
    data: GetQuestionsByQuestionIdData,
  ): CancelablePromise<GetQuestionsByQuestionIdResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/questions/{question_id}",
      path: {
        question_id: data.questionId,
      },
      query: {
        revision_id: data.revisionId,
        language: data.language,
      },
      errors: {
        401: "Unauthorized",
        404: "Not Found",
        500: "Internal Server Error",
      },
    });
  }

  /**
   * Update question
   * Update a question (Admin only). Include question_revision_id for optimistic locking.
   * @param data The data for the request.
   * @param data.questionId Question ID
   * @param data.requestBody
   * @param data.questionRevisionId Current revision ID for optimistic locking
   * @returns QuestionResponse Question updated successfully
   * @throws ApiError
   */
  public static putQuestionsByQuestionId(
    data: PutQuestionsByQuestionIdData,
  ): CancelablePromise<PutQuestionsByQuestionIdResponse> {
    return __request(OpenAPI, {
      method: "PUT",
      url: "/questions/{question_id}",
      path: {
        question_id: data.questionId,
      },
      query: {
        question_revision_id: data.questionRevisionId,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        400: "Bad Request",
        401: "Unauthorized",
        403: "Forbidden",
        404: "Not Found",
        409: "Conflict - revision mismatch",
        500: "Internal Server Error",
      },
    });
  }

  /**
   * Delete question
   * Delete a question (Admin only). Include question_revision_id for optimistic locking.
   * @param data The data for the request.
   * @param data.questionId Question ID
   * @param data.questionRevisionId Current revision ID for optimistic locking
   * @returns void Question deleted successfully
   * @throws ApiError
   */
  public static deleteQuestionsByQuestionId(
    data: DeleteQuestionsByQuestionIdData,
  ): CancelablePromise<DeleteQuestionsByQuestionIdResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/questions/{question_id}",
      path: {
        question_id: data.questionId,
      },
      query: {
        question_revision_id: data.questionRevisionId,
      },
      errors: {
        401: "Unauthorized",
        403: "Forbidden",
        404: "Not Found",
        409: "Conflict - revision mismatch",
        500: "Internal Server Error",
      },
    });
  }
}

export class AssessmentsService {
  /**
   * List assessments
   * Get user's draft assessments
   * @param data The data for the request.
   * @param data.language Language for content
   * @returns AssessmentListResponse List of assessments
   * @throws ApiError
   */
  public static getAssessments(
    data: GetAssessmentsData = {},
  ): CancelablePromise<GetAssessmentsResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/assessments",
      query: {
        language: data.language,
      },
      errors: {
        401: "Unauthorized",
        500: "Internal Server Error",
      },
    });
  }

  /**
   * Create assessment
   * Create a new draft assessment
   * @param data The data for the request.
   * @param data.requestBody
   * @returns AssessmentResponse Assessment created successfully
   * @throws ApiError
   */
  public static postAssessments(
    data: PostAssessmentsData,
  ): CancelablePromise<PostAssessmentsResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/assessments",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        400: "Bad Request",
        401: "Unauthorized",
        500: "Internal Server Error",
      },
    });
  }

  /**
   * Get assessment
   * Get a specific draft assessment
   * @param data The data for the request.
   * @param data.assessmentId Assessment ID
   * @returns AssessmentDetailResponse Assessment details
   * @throws ApiError
   */
  public static getAssessmentsByAssessmentId(
    data: GetAssessmentsByAssessmentIdData,
  ): CancelablePromise<GetAssessmentsByAssessmentIdResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/assessments/{assessment_id}",
      path: {
        assessment_id: data.assessmentId,
      },
      errors: {
        401: "Unauthorized",
        404: "Not Found",
        500: "Internal Server Error",
      },
    });
  }

  /**
   * Update assessment
   * Update a draft assessment
   * @param data The data for the request.
   * @param data.assessmentId Assessment ID
   * @param data.requestBody
   * @returns AssessmentResponse Assessment updated successfully
   * @throws ApiError
   */
  public static putAssessmentsByAssessmentId(
    data: PutAssessmentsByAssessmentIdData,
  ): CancelablePromise<PutAssessmentsByAssessmentIdResponse> {
    return __request(OpenAPI, {
      method: "PUT",
      url: "/assessments/{assessment_id}",
      path: {
        assessment_id: data.assessmentId,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        400: "Bad Request",
        401: "Unauthorized",
        404: "Not Found",
        500: "Internal Server Error",
      },
    });
  }

  /**
   * Delete assessment
   * Delete a draft assessment
   * @param data The data for the request.
   * @param data.assessmentId Assessment ID
   * @returns void Assessment deleted successfully
   * @throws ApiError
   */
  public static deleteAssessmentsByAssessmentId(
    data: DeleteAssessmentsByAssessmentIdData,
  ): CancelablePromise<DeleteAssessmentsByAssessmentIdResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/assessments/{assessment_id}",
      path: {
        assessment_id: data.assessmentId,
      },
      errors: {
        401: "Unauthorized",
        404: "Not Found",
        500: "Internal Server Error",
      },
    });
  }

  /**
   * Submit assessment
   * Submit a draft assessment for review (creates immutable submission)
   * @param data The data for the request.
   * @param data.assessmentId Assessment ID
   * @returns SubmissionResponse Assessment submitted successfully
   * @throws ApiError
   */
  public static postAssessmentsByAssessmentIdSubmit(
    data: PostAssessmentsByAssessmentIdSubmitData,
  ): CancelablePromise<PostAssessmentsByAssessmentIdSubmitResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/assessments/{assessment_id}/submit",
      path: {
        assessment_id: data.assessmentId,
      },
      errors: {
        400: "Bad Request",
        401: "Unauthorized",
        404: "Not Found",
        500: "Internal Server Error",
      },
    });
  }
}

export class ResponsesService {
  /**
   * List responses
   * Get all responses for a draft assessment
   * @param data The data for the request.
   * @param data.assessmentId Assessment ID
   * @param data.latestOnly Return only latest version of each response
   * @returns ResponseListResponse List of responses
   * @throws ApiError
   */
  public static getAssessmentsByAssessmentIdResponses(
    data: GetAssessmentsByAssessmentIdResponsesData,
  ): CancelablePromise<GetAssessmentsByAssessmentIdResponsesResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/assessments/{assessment_id}/responses",
      path: {
        assessment_id: data.assessmentId,
      },
      query: {
        latest_only: data.latestOnly,
      },
      errors: {
        401: "Unauthorized",
        404: "Not Found",
        500: "Internal Server Error",
      },
    });
  }

  /**
   * Create response
   * Create or update a response to a question
   * @param data The data for the request.
   * @param data.assessmentId Assessment ID
   * @param data.requestBody
   * @returns ResponseResponse Response created successfully
   * @throws ApiError
   */
  public static postAssessmentsByAssessmentIdResponses(
    data: PostAssessmentsByAssessmentIdResponsesData,
  ): CancelablePromise<PostAssessmentsByAssessmentIdResponsesResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/assessments/{assessment_id}/responses",
      path: {
        assessment_id: data.assessmentId,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        400: "Bad Request",
        401: "Unauthorized",
        404: "Not Found",
        500: "Internal Server Error",
      },
    });
  }

  /**
   * Get response
   * Get a specific response
   * @param data The data for the request.
   * @param data.assessmentId Assessment ID
   * @param data.responseId Response ID
   * @returns ResponseDetailResponse Response details
   * @throws ApiError
   */
  public static getAssessmentsByAssessmentIdResponsesByResponseId(
    data: GetAssessmentsByAssessmentIdResponsesByResponseIdData,
  ): CancelablePromise<GetAssessmentsByAssessmentIdResponsesByResponseIdResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/assessments/{assessment_id}/responses/{response_id}",
      path: {
        assessment_id: data.assessmentId,
        response_id: data.responseId,
      },
      errors: {
        401: "Unauthorized",
        404: "Not Found",
        500: "Internal Server Error",
      },
    });
  }

  /**
   * Update response
   * Update a response (creates new version)
   * @param data The data for the request.
   * @param data.assessmentId Assessment ID
   * @param data.responseId Response ID
   * @param data.requestBody
   * @returns ResponseResponse Response updated successfully
   * @throws ApiError
   */
  public static putAssessmentsByAssessmentIdResponsesByResponseId(
    data: PutAssessmentsByAssessmentIdResponsesByResponseIdData,
  ): CancelablePromise<PutAssessmentsByAssessmentIdResponsesByResponseIdResponse> {
    return __request(OpenAPI, {
      method: "PUT",
      url: "/assessments/{assessment_id}/responses/{response_id}",
      path: {
        assessment_id: data.assessmentId,
        response_id: data.responseId,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        400: "Bad Request",
        401: "Unauthorized",
        404: "Not Found",
        500: "Internal Server Error",
      },
    });
  }

  /**
   * Delete response
   * Delete a response
   * @param data The data for the request.
   * @param data.assessmentId Assessment ID
   * @param data.responseId Response ID
   * @returns void Response deleted successfully
   * @throws ApiError
   */
  public static deleteAssessmentsByAssessmentIdResponsesByResponseId(
    data: DeleteAssessmentsByAssessmentIdResponsesByResponseIdData,
  ): CancelablePromise<DeleteAssessmentsByAssessmentIdResponsesByResponseIdResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/assessments/{assessment_id}/responses/{response_id}",
      path: {
        assessment_id: data.assessmentId,
        response_id: data.responseId,
      },
      errors: {
        401: "Unauthorized",
        404: "Not Found",
        500: "Internal Server Error",
      },
    });
  }

  /**
   * Get response history
   * Get all versions of a response
   * @param data The data for the request.
   * @param data.assessmentId Assessment ID
   * @param data.responseId Response ID
   * @returns ResponseHistoryResponse Response history
   * @throws ApiError
   */
  public static getAssessmentsByAssessmentIdResponsesByResponseIdHistory(
    data: GetAssessmentsByAssessmentIdResponsesByResponseIdHistoryData,
  ): CancelablePromise<GetAssessmentsByAssessmentIdResponsesByResponseIdHistoryResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/assessments/{assessment_id}/responses/{response_id}/history",
      path: {
        assessment_id: data.assessmentId,
        response_id: data.responseId,
      },
      errors: {
        401: "Unauthorized",
        404: "Not Found",
        500: "Internal Server Error",
      },
    });
  }
}

export class SubmissionsService {
  /**
   * List user submissions
   * Get user's submitted assessments
   * @param data The data for the request.
   * @param data.status Filter by review status
   * @returns SubmissionListResponse List of user submissions
   * @throws ApiError
   */
  public static getSubmissions(
    data: GetSubmissionsData = {},
  ): CancelablePromise<GetSubmissionsResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/submissions",
      query: {
        status: data.status,
      },
      errors: {
        401: "Unauthorized",
        500: "Internal Server Error",
      },
    });
  }

  /**
   * Get submission
   * Get a specific submission
   * @param data The data for the request.
   * @param data.submissionId Submission ID
   * @returns SubmissionDetailResponse Submission details
   * @throws ApiError
   */
  public static getSubmissionsBySubmissionId(
    data: GetSubmissionsBySubmissionIdData,
  ): CancelablePromise<GetSubmissionsBySubmissionIdResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/submissions/{submission_id}",
      path: {
        submission_id: data.submissionId,
      },
      errors: {
        401: "Unauthorized",
        404: "Not Found",
        500: "Internal Server Error",
      },
    });
  }
}

export class AdminService {
  /**
   * List all submissions
   * Get all submissions for admin review management (Admin only)
   * @param data The data for the request.
   * @param data.status Filter by review status
   * @returns AdminSubmissionListResponse List of all submissions
   * @throws ApiError
   */
  public static getAdminSubmissions(
    data: GetAdminSubmissionsData = {},
  ): CancelablePromise<GetAdminSubmissionsResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/admin/submissions",
      query: {
        status: data.status,
      },
      errors: {
        401: "Unauthorized",
        403: "Forbidden",
        500: "Internal Server Error",
      },
    });
  }
}

export class ReportsService {
  /**
   * List reports
   * Get all reports for an approved submission
   * @param data The data for the request.
   * @param data.submissionId Submission ID
   * @param data.reportType Filter by report type
   * @returns ReportListResponse List of reports
   * @throws ApiError
   */
  public static getSubmissionsBySubmissionIdReports(
    data: GetSubmissionsBySubmissionIdReportsData,
  ): CancelablePromise<GetSubmissionsBySubmissionIdReportsResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/submissions/{submission_id}/reports",
      path: {
        submission_id: data.submissionId,
      },
      query: {
        report_type: data.reportType,
      },
      errors: {
        401: "Unauthorized",
        403: "Forbidden",
        404: "Not Found",
        500: "Internal Server Error",
      },
    });
  }

  /**
   * Generate report
   * Generate a new report for an approved submission
   * @param data The data for the request.
   * @param data.submissionId Submission ID
   * @param data.requestBody
   * @returns ReportGenerationResponse Report generation started
   * @throws ApiError
   */
  public static postSubmissionsBySubmissionIdReports(
    data: PostSubmissionsBySubmissionIdReportsData,
  ): CancelablePromise<PostSubmissionsBySubmissionIdReportsResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/submissions/{submission_id}/reports",
      path: {
        submission_id: data.submissionId,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        400: "Bad Request",
        401: "Unauthorized",
        403: "Forbidden",
        404: "Not Found",
        500: "Internal Server Error",
      },
    });
  }

  /**
   * Get report
   * Get a specific report
   * @param data The data for the request.
   * @param data.reportId Report ID
   * @returns ReportResponse Report details
   * @throws ApiError
   */
  public static getReportsByReportId(
    data: GetReportsByReportIdData,
  ): CancelablePromise<GetReportsByReportIdResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/reports/{report_id}",
      path: {
        report_id: data.reportId,
      },
      errors: {
        401: "Unauthorized",
        404: "Not Found",
        500: "Internal Server Error",
      },
    });
  }

  /**
   * Delete report
   * Delete a report
   * @param data The data for the request.
   * @param data.reportId Report ID
   * @returns void Report deleted successfully
   * @throws ApiError
   */
  public static deleteReportsByReportId(
    data: DeleteReportsByReportIdData,
  ): CancelablePromise<DeleteReportsByReportIdResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/reports/{report_id}",
      path: {
        report_id: data.reportId,
      },
      errors: {
        401: "Unauthorized",
        404: "Not Found",
        500: "Internal Server Error",
      },
    });
  }
}

export class FilesService {
  /**
   * Upload file
   * Upload a file
   * @param data The data for the request.
   * @param data.formData
   * @returns FileResponse File uploaded successfully
   * @throws ApiError
   */
  public static postFiles(
    data: PostFilesData,
  ): CancelablePromise<PostFilesResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/files",
      formData: data.formData,
      mediaType: "multipart/form-data",
      errors: {
        400: "Bad Request",
        401: "Unauthorized",
        500: "Internal Server Error",
      },
    });
  }

  /**
   * Download file
   * Download a file
   * @param data The data for the request.
   * @param data.fileId File ID
   * @returns binary File content
   * @throws ApiError
   */
  public static getFilesByFileId(
    data: GetFilesByFileIdData,
  ): CancelablePromise<GetFilesByFileIdResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/files/{file_id}",
      path: {
        file_id: data.fileId,
      },
      errors: {
        401: "Unauthorized",
        404: "Not Found",
        500: "Internal Server Error",
      },
    });
  }

  /**
   * Delete file
   * Delete a file
   * @param data The data for the request.
   * @param data.fileId File ID
   * @returns void File deleted successfully
   * @throws ApiError
   */
  public static deleteFilesByFileId(
    data: DeleteFilesByFileIdData,
  ): CancelablePromise<DeleteFilesByFileIdResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/files/{file_id}",
      path: {
        file_id: data.fileId,
      },
      errors: {
        401: "Unauthorized",
        404: "Not Found",
        500: "Internal Server Error",
      },
    });
  }

  /**
   * Get file metadata
   * Get metadata for a file
   * @param data The data for the request.
   * @param data.fileId File ID
   * @returns FileMetadataResponse File metadata
   * @throws ApiError
   */
  public static getFilesByFileIdMetadata(
    data: GetFilesByFileIdMetadataData,
  ): CancelablePromise<GetFilesByFileIdMetadataResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/files/{file_id}/metadata",
      path: {
        file_id: data.fileId,
      },
      errors: {
        401: "Unauthorized",
        404: "Not Found",
        500: "Internal Server Error",
      },
    });
  }

  /**
   * Attach file to response
   * Attach a file to a response
   * @param data The data for the request.
   * @param data.assessmentId Assessment ID
   * @param data.responseId Response ID
   * @param data.requestBody
   * @returns unknown File attached successfully
   * @throws ApiError
   */
  public static postAssessmentsByAssessmentIdResponsesByResponseIdFiles(
    data: PostAssessmentsByAssessmentIdResponsesByResponseIdFilesData,
  ): CancelablePromise<PostAssessmentsByAssessmentIdResponsesByResponseIdFilesResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/assessments/{assessment_id}/responses/{response_id}/files",
      path: {
        assessment_id: data.assessmentId,
        response_id: data.responseId,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        400: "Bad Request",
        401: "Unauthorized",
        404: "Not Found",
        500: "Internal Server Error",
      },
    });
  }

  /**
   * Remove file from response
   * Remove a file from a response
   * @param data The data for the request.
   * @param data.assessmentId Assessment ID
   * @param data.responseId Response ID
   * @param data.fileId File ID
   * @returns void File removed successfully
   * @throws ApiError
   */
  public static deleteAssessmentsByAssessmentIdResponsesByResponseIdFilesByFileId(
    data: DeleteAssessmentsByAssessmentIdResponsesByResponseIdFilesByFileIdData,
  ): CancelablePromise<DeleteAssessmentsByAssessmentIdResponsesByResponseIdFilesByFileIdResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/assessments/{assessment_id}/responses/{response_id}/files/{file_id}",
      path: {
        assessment_id: data.assessmentId,
        response_id: data.responseId,
        file_id: data.fileId,
      },
      errors: {
        401: "Unauthorized",
        404: "Not Found",
        500: "Internal Server Error",
      },
    });
  }
}

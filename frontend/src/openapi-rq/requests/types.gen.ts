// This file is auto-generated by @hey-api/openapi-ts

export type Question = {
  question_id: string;
  category: string;
  created_at: string;
};

export type QuestionRevision = {
  question_revision_id: string;
  question_id: string;
  text: string;
  language: string;
  version: number;
  created_at: string;
};

export type CreateQuestionRequest = {
  category: string;
  text: {
    [key: string]: unknown;
  };
  weight?: number;
};

export type UpdateQuestionRequest = {
  category?: string;
  text?: string;
};

export type QuestionListResponse = {
  questions: Array<Question>;
};

export type QuestionResponse = {
  question: Question;
};

export type QuestionWithRevisionsResponse = {
  question: Question;
  revisions: Array<QuestionRevision>;
};

export type QuestionRevisionListResponse = {
  revisions: Array<QuestionRevision>;
};

export type QuestionRevisionResponse = {
  revision: QuestionRevision;
};

export type Assessment = {
  assessment_id: string;
  user_id: string;
  language: string;
  created_at: string;
};

export type CreateAssessmentRequest = {
  language: string;
};

export type UpdateAssessmentRequest = {
  language?: string;
};

export type AssessmentListResponse = {
  assessments: Array<Assessment>;
};

export type AssessmentResponse = {
  assessment: Assessment;
};

export type AssessmentDetailResponse = {
  assessment: Assessment;
  questions: Array<QuestionRevision>;
  responses: Array<Response>;
};

export type Response = {
  response_id: string;
  assessment_id: string;
  question_revision_id: string;
  response: string;
  version: number;
  updated_at: string;
};

export type CreateResponseRequest = {
  question_revision_id: string;
  response: string;
  /**
   * Version for conflict resolution
   */
  version?: number;
};

export type UpdateResponseRequest = {
  response: string;
};

export type ResponseListResponse = {
  responses: Array<Response>;
};

export type ResponseResponse = {
  response: Response;
};

export type ResponseDetailResponse = {
  response: Response;
  question: QuestionRevision;
  files: Array<FileMetadata>;
};

export type ResponseHistoryResponse = {
  history: Array<Response>;
};

export type Submission = {
  submission_id: string;
  assessment_id: string;
  user_id: string;
  content: Submission_content;
  review_status:
    | "pending_review"
    | "under_review"
    | "approved"
    | "rejected"
    | "revision_requested";
  submitted_at: string;
  reviewed_at?: string | null;
};

export type review_status =
  | "pending_review"
  | "under_review"
  | "approved"
  | "rejected"
  | "revision_requested";

export type SubmissionListResponse = {
  submissions: Array<Submission>;
};

export type SubmissionResponse = {
  submission: Submission;
};

export type SubmissionDetailResponse = {
  submission: Submission;
  current_review: Review;
};

export type AdminSubmissionListResponse = {
  submissions: Array<AdminSubmissionDetail>;
};

export type AdminSubmissionDetail = {
  /**
   * Unique submission identifier
   */
  submission_id: string;
  /**
   * Original assessment that was submitted
   */
  assessment_id: string;
  /**
   * User who submitted the assessment
   */
  user_id: string;
  content: AdminSubmissionDetail_content;
  /**
   * Current review status
   */
  review_status:
    | "pending_review"
    | "under_review"
    | "approved"
    | "rejected"
    | "revision_requested";
  /**
   * Submission timestamp
   */
  submitted_at: string;
  /**
   * Review completion timestamp
   */
  reviewed_at?: string | null;
};

export type Review = {
  review_id: string;
  submission_id: string;
  reviewer_id: string;
  reviewer_email?: string | null;
  status: "pending" | "in_progress" | "completed";
  decision?: "approved" | "rejected" | "revision_requested" | null;
  comments?: string | null;
  created_at: string;
  completed_at?: string | null;
};

export type status = "pending" | "in_progress" | "completed";

export type decision = "approved" | "rejected" | "revision_requested";

export type AdminReview = {
  review_id: string;
  submission_id: string;
  user_email: string;
  reviewer_id: string;
  reviewer_email: string;
  status: "pending" | "in_progress" | "completed";
  decision?: "approved" | "rejected" | "revision_requested" | null;
  created_at: string;
};

export type AdminReviewListResponse = {
  reviews: Array<AdminReview>;
};

export type Report = {
  report_id: string;
  submission_id: string;
  report_type: "sustainability" | "compliance" | "summary" | "detailed";
  status: "generating" | "completed" | "failed";
  generated_at: string;
  data?: {
    [key: string]: unknown;
  } | null;
};

export type report_type =
  | "sustainability"
  | "compliance"
  | "summary"
  | "detailed";

export type status2 = "generating" | "completed" | "failed";

export type GenerateReportRequest = {
  report_type: "sustainability" | "compliance" | "summary" | "detailed";
  options?: {
    [key: string]: unknown;
  } | null;
};

export type ReportGenerationResponse = {
  report_id: string;
  status: "generating" | "completed" | "failed";
};

export type ReportListResponse = {
  reports: Array<Report>;
};

export type ReportResponse = {
  report: Report;
};

export type FileMetadata = {
  file_id: string;
  /**
   * File metadata including filename, size, content type, etc.
   */
  metadata: {
    [key: string]: unknown;
  };
};

export type FileResponse = {
  file: FileMetadata;
};

export type FileMetadataResponse = {
  file_id: string;
  metadata: {
    [key: string]: unknown;
  };
};

export type Error = {
  error: string;
  message: string;
  details?: {
    [key: string]: unknown;
  } | null;
};

export type ValidationError = {
  error: string;
  message: string;
  validation_errors: Array<ValidationError_validation_errors>;
};

export type inline_response_200 = {
  status?: string;
  timestamp?: string;
};

export type files_body = {
  file?: Blob | File;
  /**
   * JSON metadata for the file
   */
  metadata?: string;
};

export type response_id_files_body = {
  file_id?: string;
};

export type Submission_content_assessment = {
  assessment_id?: string;
  language?: string;
};

export type Submission_content_responses = {
  question?: string;
  response?: string;
  files?: Array<FileMetadata>;
};

/**
 * Immutable snapshot of assessment and all responses
 */
export type Submission_content = {
  assessment?: Submission_content_assessment;
  responses?: Array<Submission_content_responses>;
};

export type AdminSubmissionDetail_content_responses = {
  /**
   * The actual question text (mapped from question_revision_id)
   */
  question_text?: string;
  /**
   * Question category
   */
  question_category?: string;
  /**
   * User's response to the question
   */
  response?: string;
  /**
   * Attached files with complete metadata
   */
  files?: Array<FileMetadata>;
};

/**
 * Immutable snapshot of assessment and all responses with question text
 */
export type AdminSubmissionDetail_content = {
  assessment?: Submission_content_assessment;
  responses?: Array<AdminSubmissionDetail_content_responses>;
};

export type ValidationError_validation_errors = {
  field?: string;
  message?: string;
};

/**
 * Question ID
 */
export type ParameterQuestionId = string;

/**
 * Assessment ID
 */
export type ParameterAssessmentId = string;

/**
 * Response ID
 */
export type ParameterResponseId = string;

/**
 * Submission ID
 */
export type ParameterSubmissionId = string;

/**
 * Report ID
 */
export type ParameterReportId = string;

/**
 * File ID
 */
export type ParameterFileId = string;

/**
 * Language for content
 */
export type ParameterLanguage = string;

export type GetHealthResponse = inline_response_200;

export type GetQuestionsData = {
  /**
   * Filter by question category
   */
  category?: string;
  /**
   * Language for content
   */
  language?: string;
};

export type GetQuestionsResponse = QuestionListResponse;

export type PostQuestionsData = {
  requestBody: CreateQuestionRequest;
};

export type PostQuestionsResponse = QuestionResponse;

export type GetQuestionsByQuestionIdData = {
  /**
   * Language for content
   */
  language?: string;
  /**
   * Question ID
   */
  questionId: string;
  /**
   * Specific revision ID to retrieve (optional)
   */
  revisionId?: string;
};

export type GetQuestionsByQuestionIdResponse = QuestionWithRevisionsResponse;

export type PutQuestionsByQuestionIdData = {
  /**
   * Question ID
   */
  questionId: string;
  /**
   * Current revision ID for optimistic locking
   */
  questionRevisionId?: string;
  requestBody: UpdateQuestionRequest;
};

export type PutQuestionsByQuestionIdResponse = QuestionResponse;

export type DeleteQuestionsByQuestionIdData = {
  /**
   * Question ID
   */
  questionId: string;
  /**
   * Current revision ID for optimistic locking
   */
  questionRevisionId?: string;
};

export type DeleteQuestionsByQuestionIdResponse = void;

export type GetAssessmentsData = {
  /**
   * Language for content
   */
  language?: string;
};

export type GetAssessmentsResponse = AssessmentListResponse;

export type PostAssessmentsData = {
  requestBody: CreateAssessmentRequest;
};

export type PostAssessmentsResponse = AssessmentResponse;

export type GetAssessmentsByAssessmentIdData = {
  /**
   * Assessment ID
   */
  assessmentId: string;
};

export type GetAssessmentsByAssessmentIdResponse = AssessmentDetailResponse;

export type PutAssessmentsByAssessmentIdData = {
  /**
   * Assessment ID
   */
  assessmentId: string;
  requestBody: UpdateAssessmentRequest;
};

export type PutAssessmentsByAssessmentIdResponse = AssessmentResponse;

export type DeleteAssessmentsByAssessmentIdData = {
  /**
   * Assessment ID
   */
  assessmentId: string;
};

export type DeleteAssessmentsByAssessmentIdResponse = void;

export type PostAssessmentsByAssessmentIdSubmitData = {
  /**
   * Assessment ID
   */
  assessmentId: string;
};

export type PostAssessmentsByAssessmentIdSubmitResponse = SubmissionResponse;

export type GetAssessmentsByAssessmentIdResponsesData = {
  /**
   * Assessment ID
   */
  assessmentId: string;
  /**
   * Return only latest version of each response
   */
  latestOnly?: boolean;
};

export type GetAssessmentsByAssessmentIdResponsesResponse =
  ResponseListResponse;

export type PostAssessmentsByAssessmentIdResponsesData = {
  /**
   * Assessment ID
   */
  assessmentId: string;
  requestBody: CreateResponseRequest;
};

export type PostAssessmentsByAssessmentIdResponsesResponse = ResponseResponse;

export type GetAssessmentsByAssessmentIdResponsesByResponseIdData = {
  /**
   * Assessment ID
   */
  assessmentId: string;
  /**
   * Response ID
   */
  responseId: string;
};

export type GetAssessmentsByAssessmentIdResponsesByResponseIdResponse =
  ResponseDetailResponse;

export type PutAssessmentsByAssessmentIdResponsesByResponseIdData = {
  /**
   * Assessment ID
   */
  assessmentId: string;
  requestBody: UpdateResponseRequest;
  /**
   * Response ID
   */
  responseId: string;
};

export type PutAssessmentsByAssessmentIdResponsesByResponseIdResponse =
  ResponseResponse;

export type DeleteAssessmentsByAssessmentIdResponsesByResponseIdData = {
  /**
   * Assessment ID
   */
  assessmentId: string;
  /**
   * Response ID
   */
  responseId: string;
};

export type DeleteAssessmentsByAssessmentIdResponsesByResponseIdResponse = void;

export type GetAssessmentsByAssessmentIdResponsesByResponseIdHistoryData = {
  /**
   * Assessment ID
   */
  assessmentId: string;
  /**
   * Response ID
   */
  responseId: string;
};

export type GetAssessmentsByAssessmentIdResponsesByResponseIdHistoryResponse =
  ResponseHistoryResponse;

export type GetSubmissionsData = {
  /**
   * Filter by review status
   */
  status?:
    | "pending_review"
    | "under_review"
    | "approved"
    | "rejected"
    | "revision_requested";
};

export type GetSubmissionsResponse = SubmissionListResponse;

export type GetSubmissionsBySubmissionIdData = {
  /**
   * Submission ID
   */
  submissionId: string;
};

export type GetSubmissionsBySubmissionIdResponse = SubmissionDetailResponse;

export type GetAdminSubmissionsData = {
  /**
   * Filter by review status
   */
  status?:
    | "pending_review"
    | "under_review"
    | "approved"
    | "rejected"
    | "revision_requested";
};

export type GetAdminSubmissionsResponse = AdminSubmissionListResponse;

export type GetSubmissionsBySubmissionIdReportsData = {
  /**
   * Filter by report type
   */
  reportType?: "sustainability" | "compliance" | "summary" | "detailed";
  /**
   * Submission ID
   */
  submissionId: string;
};

export type GetSubmissionsBySubmissionIdReportsResponse = ReportListResponse;

export type PostSubmissionsBySubmissionIdReportsData = {
  requestBody: GenerateReportRequest;
  /**
   * Submission ID
   */
  submissionId: string;
};

export type PostSubmissionsBySubmissionIdReportsResponse =
  ReportGenerationResponse;

export type GetReportsByReportIdData = {
  /**
   * Report ID
   */
  reportId: string;
};

export type GetReportsByReportIdResponse = ReportResponse;

export type DeleteReportsByReportIdData = {
  /**
   * Report ID
   */
  reportId: string;
};

export type DeleteReportsByReportIdResponse = void;

export type PostFilesData = {
  formData: files_body;
};

export type PostFilesResponse = FileResponse;

export type GetFilesByFileIdData = {
  /**
   * File ID
   */
  fileId: string;
};

export type GetFilesByFileIdResponse = Blob | File;

export type DeleteFilesByFileIdData = {
  /**
   * File ID
   */
  fileId: string;
};

export type DeleteFilesByFileIdResponse = void;

export type GetFilesByFileIdMetadataData = {
  /**
   * File ID
   */
  fileId: string;
};

export type GetFilesByFileIdMetadataResponse = FileMetadataResponse;

export type PostAssessmentsByAssessmentIdResponsesByResponseIdFilesData = {
  /**
   * Assessment ID
   */
  assessmentId: string;
  requestBody: response_id_files_body;
  /**
   * Response ID
   */
  responseId: string;
};

export type PostAssessmentsByAssessmentIdResponsesByResponseIdFilesResponse =
  unknown;

export type DeleteAssessmentsByAssessmentIdResponsesByResponseIdFilesByFileIdData =
  {
    /**
     * Assessment ID
     */
    assessmentId: string;
    /**
     * File ID
     */
    fileId: string;
    /**
     * Response ID
     */
    responseId: string;
  };

export type DeleteAssessmentsByAssessmentIdResponsesByResponseIdFilesByFileIdResponse =
  void;

export type $OpenApiTs = {
  "/health": {
    get: {
      res: {
        /**
         * Service is healthy
         */
        200: inline_response_200;
      };
    };
  };
  "/questions": {
    get: {
      req: GetQuestionsData;
      res: {
        /**
         * List of questions
         */
        200: QuestionListResponse;
        /**
         * Unauthorized
         */
        401: Error;
        /**
         * Internal Server Error
         */
        500: Error;
      };
    };
    post: {
      req: PostQuestionsData;
      res: {
        /**
         * Question created successfully
         */
        201: QuestionResponse;
        /**
         * Bad Request
         */
        400: ValidationError;
        /**
         * Unauthorized
         */
        401: Error;
        /**
         * Forbidden
         */
        403: Error;
        /**
         * Internal Server Error
         */
        500: Error;
      };
    };
  };
  "/questions/{question_id}": {
    get: {
      req: GetQuestionsByQuestionIdData;
      res: {
        /**
         * Question details
         */
        200: QuestionWithRevisionsResponse;
        /**
         * Unauthorized
         */
        401: Error;
        /**
         * Not Found
         */
        404: Error;
        /**
         * Internal Server Error
         */
        500: Error;
      };
    };
    put: {
      req: PutQuestionsByQuestionIdData;
      res: {
        /**
         * Question updated successfully
         */
        200: QuestionResponse;
        /**
         * Bad Request
         */
        400: ValidationError;
        /**
         * Unauthorized
         */
        401: Error;
        /**
         * Forbidden
         */
        403: Error;
        /**
         * Not Found
         */
        404: Error;
        /**
         * Conflict - revision mismatch
         */
        409: Error;
        /**
         * Internal Server Error
         */
        500: Error;
      };
    };
    delete: {
      req: DeleteQuestionsByQuestionIdData;
      res: {
        /**
         * Question deleted successfully
         */
        204: void;
        /**
         * Unauthorized
         */
        401: Error;
        /**
         * Forbidden
         */
        403: Error;
        /**
         * Not Found
         */
        404: Error;
        /**
         * Conflict - revision mismatch
         */
        409: Error;
        /**
         * Internal Server Error
         */
        500: Error;
      };
    };
  };
  "/assessments": {
    get: {
      req: GetAssessmentsData;
      res: {
        /**
         * List of assessments
         */
        200: AssessmentListResponse;
        /**
         * Unauthorized
         */
        401: Error;
        /**
         * Internal Server Error
         */
        500: Error;
      };
    };
    post: {
      req: PostAssessmentsData;
      res: {
        /**
         * Assessment created successfully
         */
        201: AssessmentResponse;
        /**
         * Bad Request
         */
        400: ValidationError;
        /**
         * Unauthorized
         */
        401: Error;
        /**
         * Internal Server Error
         */
        500: Error;
      };
    };
  };
  "/assessments/{assessment_id}": {
    get: {
      req: GetAssessmentsByAssessmentIdData;
      res: {
        /**
         * Assessment details
         */
        200: AssessmentDetailResponse;
        /**
         * Unauthorized
         */
        401: Error;
        /**
         * Not Found
         */
        404: Error;
        /**
         * Internal Server Error
         */
        500: Error;
      };
    };
    put: {
      req: PutAssessmentsByAssessmentIdData;
      res: {
        /**
         * Assessment updated successfully
         */
        200: AssessmentResponse;
        /**
         * Bad Request
         */
        400: ValidationError;
        /**
         * Unauthorized
         */
        401: Error;
        /**
         * Not Found
         */
        404: Error;
        /**
         * Internal Server Error
         */
        500: Error;
      };
    };
    delete: {
      req: DeleteAssessmentsByAssessmentIdData;
      res: {
        /**
         * Assessment deleted successfully
         */
        204: void;
        /**
         * Unauthorized
         */
        401: Error;
        /**
         * Not Found
         */
        404: Error;
        /**
         * Internal Server Error
         */
        500: Error;
      };
    };
  };
  "/assessments/{assessment_id}/submit": {
    post: {
      req: PostAssessmentsByAssessmentIdSubmitData;
      res: {
        /**
         * Assessment submitted successfully
         */
        201: SubmissionResponse;
        /**
         * Bad Request
         */
        400: ValidationError;
        /**
         * Unauthorized
         */
        401: Error;
        /**
         * Not Found
         */
        404: Error;
        /**
         * Internal Server Error
         */
        500: Error;
      };
    };
  };
  "/assessments/{assessment_id}/responses": {
    get: {
      req: GetAssessmentsByAssessmentIdResponsesData;
      res: {
        /**
         * List of responses
         */
        200: ResponseListResponse;
        /**
         * Unauthorized
         */
        401: Error;
        /**
         * Not Found
         */
        404: Error;
        /**
         * Internal Server Error
         */
        500: Error;
      };
    };
    post: {
      req: PostAssessmentsByAssessmentIdResponsesData;
      res: {
        /**
         * Response created successfully
         */
        201: ResponseResponse;
        /**
         * Bad Request
         */
        400: ValidationError;
        /**
         * Unauthorized
         */
        401: Error;
        /**
         * Not Found
         */
        404: Error;
        /**
         * Internal Server Error
         */
        500: Error;
      };
    };
  };
  "/assessments/{assessment_id}/responses/{response_id}": {
    get: {
      req: GetAssessmentsByAssessmentIdResponsesByResponseIdData;
      res: {
        /**
         * Response details
         */
        200: ResponseDetailResponse;
        /**
         * Unauthorized
         */
        401: Error;
        /**
         * Not Found
         */
        404: Error;
        /**
         * Internal Server Error
         */
        500: Error;
      };
    };
    put: {
      req: PutAssessmentsByAssessmentIdResponsesByResponseIdData;
      res: {
        /**
         * Response updated successfully
         */
        200: ResponseResponse;
        /**
         * Bad Request
         */
        400: ValidationError;
        /**
         * Unauthorized
         */
        401: Error;
        /**
         * Not Found
         */
        404: Error;
        /**
         * Internal Server Error
         */
        500: Error;
      };
    };
    delete: {
      req: DeleteAssessmentsByAssessmentIdResponsesByResponseIdData;
      res: {
        /**
         * Response deleted successfully
         */
        204: void;
        /**
         * Unauthorized
         */
        401: Error;
        /**
         * Not Found
         */
        404: Error;
        /**
         * Internal Server Error
         */
        500: Error;
      };
    };
  };
  "/assessments/{assessment_id}/responses/{response_id}/history": {
    get: {
      req: GetAssessmentsByAssessmentIdResponsesByResponseIdHistoryData;
      res: {
        /**
         * Response history
         */
        200: ResponseHistoryResponse;
        /**
         * Unauthorized
         */
        401: Error;
        /**
         * Not Found
         */
        404: Error;
        /**
         * Internal Server Error
         */
        500: Error;
      };
    };
  };
  "/submissions": {
    get: {
      req: GetSubmissionsData;
      res: {
        /**
         * List of user submissions
         */
        200: SubmissionListResponse;
        /**
         * Unauthorized
         */
        401: Error;
        /**
         * Internal Server Error
         */
        500: Error;
      };
    };
  };
  "/submissions/{submission_id}": {
    get: {
      req: GetSubmissionsBySubmissionIdData;
      res: {
        /**
         * Submission details
         */
        200: SubmissionDetailResponse;
        /**
         * Unauthorized
         */
        401: Error;
        /**
         * Not Found
         */
        404: Error;
        /**
         * Internal Server Error
         */
        500: Error;
      };
    };
  };
  "/admin/submissions": {
    get: {
      req: GetAdminSubmissionsData;
      res: {
        /**
         * List of all submissions
         */
        200: AdminSubmissionListResponse;
        /**
         * Unauthorized
         */
        401: Error;
        /**
         * Forbidden
         */
        403: Error;
        /**
         * Internal Server Error
         */
        500: Error;
      };
    };
  };
  "/submissions/{submission_id}/reports": {
    get: {
      req: GetSubmissionsBySubmissionIdReportsData;
      res: {
        /**
         * List of reports
         */
        200: ReportListResponse;
        /**
         * Unauthorized
         */
        401: Error;
        /**
         * Forbidden
         */
        403: Error;
        /**
         * Not Found
         */
        404: Error;
        /**
         * Internal Server Error
         */
        500: Error;
      };
    };
    post: {
      req: PostSubmissionsBySubmissionIdReportsData;
      res: {
        /**
         * Report generation started
         */
        201: ReportGenerationResponse;
        /**
         * Bad Request
         */
        400: ValidationError;
        /**
         * Unauthorized
         */
        401: Error;
        /**
         * Forbidden
         */
        403: Error;
        /**
         * Not Found
         */
        404: Error;
        /**
         * Internal Server Error
         */
        500: Error;
      };
    };
  };
  "/reports/{report_id}": {
    get: {
      req: GetReportsByReportIdData;
      res: {
        /**
         * Report details
         */
        200: ReportResponse;
        /**
         * Unauthorized
         */
        401: Error;
        /**
         * Not Found
         */
        404: Error;
        /**
         * Internal Server Error
         */
        500: Error;
      };
    };
    delete: {
      req: DeleteReportsByReportIdData;
      res: {
        /**
         * Report deleted successfully
         */
        204: void;
        /**
         * Unauthorized
         */
        401: Error;
        /**
         * Not Found
         */
        404: Error;
        /**
         * Internal Server Error
         */
        500: Error;
      };
    };
  };
  "/files": {
    post: {
      req: PostFilesData;
      res: {
        /**
         * File uploaded successfully
         */
        201: FileResponse;
        /**
         * Bad Request
         */
        400: ValidationError;
        /**
         * Unauthorized
         */
        401: Error;
        /**
         * Internal Server Error
         */
        500: Error;
      };
    };
  };
  "/files/{file_id}": {
    get: {
      req: GetFilesByFileIdData;
      res: {
        /**
         * File content
         */
        200: Blob | File;
        /**
         * Unauthorized
         */
        401: Error;
        /**
         * Not Found
         */
        404: Error;
        /**
         * Internal Server Error
         */
        500: Error;
      };
    };
    delete: {
      req: DeleteFilesByFileIdData;
      res: {
        /**
         * File deleted successfully
         */
        204: void;
        /**
         * Unauthorized
         */
        401: Error;
        /**
         * Not Found
         */
        404: Error;
        /**
         * Internal Server Error
         */
        500: Error;
      };
    };
  };
  "/files/{file_id}/metadata": {
    get: {
      req: GetFilesByFileIdMetadataData;
      res: {
        /**
         * File metadata
         */
        200: FileMetadataResponse;
        /**
         * Unauthorized
         */
        401: Error;
        /**
         * Not Found
         */
        404: Error;
        /**
         * Internal Server Error
         */
        500: Error;
      };
    };
  };
  "/assessments/{assessment_id}/responses/{response_id}/files": {
    post: {
      req: PostAssessmentsByAssessmentIdResponsesByResponseIdFilesData;
      res: {
        /**
         * File attached successfully
         */
        201: unknown;
        /**
         * Bad Request
         */
        400: ValidationError;
        /**
         * Unauthorized
         */
        401: Error;
        /**
         * Not Found
         */
        404: Error;
        /**
         * Internal Server Error
         */
        500: Error;
      };
    };
  };
  "/assessments/{assessment_id}/responses/{response_id}/files/{file_id}": {
    delete: {
      req: DeleteAssessmentsByAssessmentIdResponsesByResponseIdFilesByFileIdData;
      res: {
        /**
         * File removed successfully
         */
        204: void;
        /**
         * Unauthorized
         */
        401: Error;
        /**
         * Not Found
         */
        404: Error;
        /**
         * Internal Server Error
         */
        500: Error;
      };
    };
  };
};

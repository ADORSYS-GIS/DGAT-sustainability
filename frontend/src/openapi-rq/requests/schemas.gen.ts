// This file is auto-generated by @hey-api/openapi-ts

export const $Question = {
  required: ["category", "created_at", "question_id"],
  type: "object",
  properties: {
    question_id: {
      type: "string",
      format: "uuid",
    },
    category: {
      type: "string",
    },
    created_at: {
      type: "string",
      format: "date-time",
    },
  },
} as const;

export const $QuestionRevision = {
  required: [
    "created_at",
    "language",
    "question_id",
    "question_revision_id",
    "text",
    "version",
  ],
  type: "object",
  properties: {
    question_revision_id: {
      type: "string",
      format: "uuid",
    },
    question_id: {
      type: "string",
      format: "uuid",
    },
    text: {
      type: "string",
    },
    language: {
      type: "string",
      default: "en",
    },
    version: {
      type: "integer",
    },
    created_at: {
      type: "string",
      format: "date-time",
    },
  },
} as const;

export const $CreateQuestionRequest = {
  required: ["category", "text"],
  type: "object",
  properties: {
    category: {
      type: "string",
    },
    text: {
      type: "object",
      default: {
        en: "explain you ecological policies",
      },
    },
    weight: {
      type: "integer",
      default: 1,
    },
  },
} as const;

export const $UpdateQuestionRequest = {
  type: "object",
  properties: {
    category: {
      type: "string",
    },
    text: {
      type: "string",
    },
  },
} as const;

export const $QuestionListResponse = {
  required: ["questions"],
  type: "object",
  properties: {
    questions: {
      type: "array",
      items: {
        $ref: "#/components/schemas/Question",
      },
    },
  },
} as const;

export const $QuestionResponse = {
  required: ["question"],
  type: "object",
  properties: {
    question: {
      $ref: "#/components/schemas/Question",
    },
  },
} as const;

export const $QuestionWithRevisionsResponse = {
  required: ["question", "revisions"],
  type: "object",
  properties: {
    question: {
      $ref: "#/components/schemas/Question",
    },
    revisions: {
      type: "array",
      items: {
        $ref: "#/components/schemas/QuestionRevision",
      },
    },
  },
} as const;

export const $QuestionRevisionListResponse = {
  required: ["revisions"],
  type: "object",
  properties: {
    revisions: {
      type: "array",
      items: {
        $ref: "#/components/schemas/QuestionRevision",
      },
    },
  },
} as const;

export const $QuestionRevisionResponse = {
  required: ["revision"],
  type: "object",
  properties: {
    revision: {
      $ref: "#/components/schemas/QuestionRevision",
    },
  },
} as const;

export const $Assessment = {
  required: ["assessment_id", "created_at", "language", "user_id"],
  type: "object",
  properties: {
    assessment_id: {
      type: "string",
      format: "uuid",
    },
    user_id: {
      type: "string",
    },
    language: {
      type: "string",
      default: "en",
    },
    created_at: {
      type: "string",
      format: "date-time",
    },
  },
} as const;

export const $CreateAssessmentRequest = {
  required: ["language"],
  type: "object",
  properties: {
    language: {
      type: "string",
      default: "en",
    },
  },
} as const;

export const $UpdateAssessmentRequest = {
  type: "object",
  properties: {
    language: {
      type: "string",
    },
  },
} as const;

export const $AssessmentListResponse = {
  required: ["assessments"],
  type: "object",
  properties: {
    assessments: {
      type: "array",
      items: {
        $ref: "#/components/schemas/Assessment",
      },
    },
  },
} as const;

export const $AssessmentResponse = {
  required: ["assessment"],
  type: "object",
  properties: {
    assessment: {
      $ref: "#/components/schemas/Assessment",
    },
  },
} as const;

export const $AssessmentDetailResponse = {
  required: ["assessment", "questions", "responses"],
  type: "object",
  properties: {
    assessment: {
      $ref: "#/components/schemas/Assessment",
    },
    questions: {
      type: "array",
      items: {
        $ref: "#/components/schemas/QuestionRevision",
      },
    },
    responses: {
      type: "array",
      items: {
        $ref: "#/components/schemas/Response",
      },
    },
  },
} as const;

export const $Response = {
  required: [
    "assessment_id",
    "question_revision_id",
    "response",
    "response_id",
    "updated_at",
    "version",
  ],
  type: "object",
  properties: {
    response_id: {
      type: "string",
      format: "uuid",
    },
    assessment_id: {
      type: "string",
      format: "uuid",
    },
    question_revision_id: {
      type: "string",
      format: "uuid",
    },
    response: {
      type: "string",
    },
    version: {
      type: "integer",
    },
    updated_at: {
      type: "string",
      format: "date-time",
    },
  },
} as const;

export const $CreateResponseRequest = {
  required: ["question_revision_id", "response"],
  type: "object",
  properties: {
    question_revision_id: {
      type: "string",
      format: "uuid",
    },
    response: {
      type: "string",
    },
    version: {
      type: "integer",
      description: "Version for conflict resolution",
    },
  },
} as const;

export const $UpdateResponseRequest = {
  required: ["response"],
  type: "object",
  properties: {
    response: {
      type: "string",
    },
  },
} as const;

export const $ResponseListResponse = {
  required: ["responses"],
  type: "object",
  properties: {
    responses: {
      type: "array",
      items: {
        $ref: "#/components/schemas/Response",
      },
    },
  },
} as const;

export const $ResponseResponse = {
  required: ["response"],
  type: "object",
  properties: {
    response: {
      $ref: "#/components/schemas/Response",
    },
  },
} as const;

export const $ResponseDetailResponse = {
  required: ["files", "question", "response"],
  type: "object",
  properties: {
    response: {
      $ref: "#/components/schemas/Response",
    },
    question: {
      $ref: "#/components/schemas/QuestionRevision",
    },
    files: {
      type: "array",
      items: {
        $ref: "#/components/schemas/FileMetadata",
      },
    },
  },
} as const;

export const $ResponseHistoryResponse = {
  required: ["history"],
  type: "object",
  properties: {
    history: {
      type: "array",
      items: {
        $ref: "#/components/schemas/Response",
      },
    },
  },
} as const;

export const $Submission = {
  required: [
    "assessment_id",
    "content",
    "review_status",
    "submission_id",
    "submitted_at",
    "user_id",
  ],
  type: "object",
  properties: {
    submission_id: {
      type: "string",
      format: "uuid",
    },
    assessment_id: {
      type: "string",
      format: "uuid",
    },
    user_id: {
      type: "string",
    },
    content: {
      $ref: "#/components/schemas/Submission_content",
    },
    review_status: {
      type: "string",
      enum: [
        "pending_review",
        "under_review",
        "approved",
        "rejected",
        "revision_requested",
      ],
    },
    submitted_at: {
      type: "string",
      format: "date-time",
    },
    reviewed_at: {
      type: "string",
      format: "date-time",
      nullable: true,
    },
  },
} as const;

export const $SubmissionListResponse = {
  required: ["submissions"],
  type: "object",
  properties: {
    submissions: {
      type: "array",
      items: {
        $ref: "#/components/schemas/Submission",
      },
    },
  },
} as const;

export const $SubmissionResponse = {
  required: ["submission"],
  type: "object",
  properties: {
    submission: {
      $ref: "#/components/schemas/Submission",
    },
  },
} as const;

export const $SubmissionDetailResponse = {
  required: ["current_review", "submission"],
  type: "object",
  properties: {
    submission: {
      $ref: "#/components/schemas/Submission",
    },
    current_review: {
      $ref: "#/components/schemas/Review",
    },
  },
} as const;

export const $AdminSubmissionListResponse = {
  required: ["submissions"],
  type: "object",
  properties: {
    submissions: {
      type: "array",
      items: {
        $ref: "#/components/schemas/AdminSubmissionDetail",
      },
    },
  },
} as const;

export const $AdminSubmissionDetail = {
  required: [
    "assessment_id",
    "content",
    "review_status",
    "submission_id",
    "submitted_at",
    "user_id",
  ],
  type: "object",
  properties: {
    submission_id: {
      type: "string",
      description: "Unique submission identifier",
      format: "uuid",
    },
    assessment_id: {
      type: "string",
      description: "Original assessment that was submitted",
      format: "uuid",
    },
    user_id: {
      type: "string",
      description: "User who submitted the assessment",
    },
    content: {
      $ref: "#/components/schemas/AdminSubmissionDetail_content",
    },
    review_status: {
      type: "string",
      description: "Current review status",
      enum: [
        "pending_review",
        "under_review",
        "approved",
        "rejected",
        "revision_requested",
      ],
    },
    submitted_at: {
      type: "string",
      description: "Submission timestamp",
      format: "date-time",
    },
    reviewed_at: {
      type: "string",
      description: "Review completion timestamp",
      format: "date-time",
      nullable: true,
    },
  },
} as const;

export const $Review = {
  required: [
    "created_at",
    "review_id",
    "reviewer_id",
    "status",
    "submission_id",
  ],
  type: "object",
  properties: {
    review_id: {
      type: "string",
      format: "uuid",
    },
    submission_id: {
      type: "string",
      format: "uuid",
    },
    reviewer_id: {
      type: "string",
    },
    reviewer_email: {
      type: "string",
      nullable: true,
    },
    status: {
      type: "string",
      enum: ["pending", "in_progress", "completed"],
    },
    decision: {
      type: "string",
      nullable: true,
      enum: ["approved", "rejected", "revision_requested"],
    },
    comments: {
      type: "string",
      nullable: true,
    },
    created_at: {
      type: "string",
      format: "date-time",
    },
    completed_at: {
      type: "string",
      format: "date-time",
      nullable: true,
    },
  },
} as const;

export const $AdminReview = {
  required: [
    "created_at",
    "review_id",
    "reviewer_email",
    "reviewer_id",
    "status",
    "submission_id",
    "user_email",
  ],
  type: "object",
  properties: {
    review_id: {
      type: "string",
      format: "uuid",
    },
    submission_id: {
      type: "string",
      format: "uuid",
    },
    user_email: {
      type: "string",
    },
    reviewer_id: {
      type: "string",
    },
    reviewer_email: {
      type: "string",
    },
    status: {
      type: "string",
      enum: ["pending", "in_progress", "completed"],
    },
    decision: {
      type: "string",
      nullable: true,
      enum: ["approved", "rejected", "revision_requested"],
    },
    created_at: {
      type: "string",
      format: "date-time",
    },
  },
} as const;

export const $AdminReviewListResponse = {
  required: ["reviews"],
  type: "object",
  properties: {
    reviews: {
      type: "array",
      items: {
        $ref: "#/components/schemas/AdminReview",
      },
    },
  },
} as const;

export const $Report = {
  required: [
    "generated_at",
    "report_id",
    "report_type",
    "status",
    "submission_id",
  ],
  type: "object",
  properties: {
    report_id: {
      type: "string",
      format: "uuid",
    },
    submission_id: {
      type: "string",
      format: "uuid",
    },
    report_type: {
      type: "string",
      enum: ["sustainability", "compliance", "summary", "detailed"],
    },
    status: {
      type: "string",
      enum: ["generating", "completed", "failed"],
    },
    generated_at: {
      type: "string",
      format: "date-time",
    },
    data: {
      type: "object",
      nullable: true,
    },
  },
} as const;

export const $GenerateReportRequest = {
  required: ["report_type"],
  type: "object",
  properties: {
    report_type: {
      type: "string",
      enum: ["sustainability", "compliance", "summary", "detailed"],
    },
    options: {
      type: "object",
      nullable: true,
    },
  },
} as const;

export const $ReportGenerationResponse = {
  required: ["report_id", "status"],
  type: "object",
  properties: {
    report_id: {
      type: "string",
      format: "uuid",
    },
    status: {
      type: "string",
      enum: ["generating", "completed", "failed"],
    },
  },
} as const;

export const $ReportListResponse = {
  required: ["reports"],
  type: "object",
  properties: {
    reports: {
      type: "array",
      items: {
        $ref: "#/components/schemas/Report",
      },
    },
  },
} as const;

export const $ReportResponse = {
  required: ["report"],
  type: "object",
  properties: {
    report: {
      $ref: "#/components/schemas/Report",
    },
  },
} as const;

export const $FileMetadata = {
  required: ["file_id", "metadata"],
  type: "object",
  properties: {
    file_id: {
      type: "string",
      format: "uuid",
    },
    metadata: {
      type: "object",
      description: "File metadata including filename, size, content type, etc.",
    },
  },
} as const;

export const $FileResponse = {
  required: ["file"],
  type: "object",
  properties: {
    file: {
      $ref: "#/components/schemas/FileMetadata",
    },
  },
} as const;

export const $FileMetadataResponse = {
  required: ["file_id", "metadata"],
  type: "object",
  properties: {
    file_id: {
      type: "string",
      format: "uuid",
    },
    metadata: {
      type: "object",
    },
  },
} as const;

export const $Error = {
  required: ["error", "message"],
  type: "object",
  properties: {
    error: {
      type: "string",
    },
    message: {
      type: "string",
    },
    details: {
      type: "object",
      nullable: true,
    },
  },
} as const;

export const $ValidationError = {
  required: ["error", "message", "validation_errors"],
  type: "object",
  properties: {
    error: {
      type: "string",
      example: "validation_failed",
    },
    message: {
      type: "string",
      example: "Request validation failed",
    },
    validation_errors: {
      type: "array",
      items: {
        $ref: "#/components/schemas/ValidationError_validation_errors",
      },
    },
  },
} as const;

export const $inline_response_200 = {
  type: "object",
  properties: {
    status: {
      type: "string",
      example: "healthy",
    },
    timestamp: {
      type: "string",
      format: "date-time",
    },
  },
} as const;

export const $files_body = {
  type: "object",
  properties: {
    file: {
      type: "string",
      format: "binary",
    },
    metadata: {
      type: "string",
      description: "JSON metadata for the file",
    },
  },
} as const;

export const $response_id_files_body = {
  type: "object",
  properties: {
    file_id: {
      type: "string",
      format: "uuid",
    },
  },
} as const;

export const $Submission_content_assessment = {
  type: "object",
  properties: {
    assessment_id: {
      type: "string",
      format: "uuid",
      example: "550e8400-e29b-41d4-a716-446655440000",
    },
    language: {
      type: "string",
      example: "en",
    },
  },
} as const;

export const $Submission_content_responses = {
  type: "object",
  properties: {
    question: {
      type: "string",
      format: "uuid",
    },
    response: {
      type: "string",
      example: "Our organization has a comprehensive sustainability policy",
    },
    files: {
      type: "array",
      items: {
        $ref: "#/components/schemas/FileMetadata",
      },
    },
  },
} as const;

export const $Submission_content = {
  type: "object",
  properties: {
    assessment: {
      $ref: "#/components/schemas/Submission_content_assessment",
    },
    responses: {
      type: "array",
      items: {
        $ref: "#/components/schemas/Submission_content_responses",
      },
    },
  },
  description: "Immutable snapshot of assessment and all responses",
} as const;

export const $AdminSubmissionDetail_content_responses = {
  type: "object",
  properties: {
    question_text: {
      type: "string",
      description:
        "The actual question text (mapped from question_revision_id)",
      example: "What is your organization's sustainability policy?",
    },
    question_category: {
      type: "string",
      description: "Question category",
      example: "Environmental",
    },
    response: {
      type: "string",
      description: "User's response to the question",
      example: "Our organization has a comprehensive sustainability policy",
    },
    files: {
      type: "array",
      description: "Attached files with complete metadata",
      items: {
        $ref: "#/components/schemas/FileMetadata",
      },
    },
  },
} as const;

export const $AdminSubmissionDetail_content = {
  type: "object",
  properties: {
    assessment: {
      $ref: "#/components/schemas/Submission_content_assessment",
    },
    responses: {
      type: "array",
      items: {
        $ref: "#/components/schemas/AdminSubmissionDetail_content_responses",
      },
    },
  },
  description:
    "Immutable snapshot of assessment and all responses with question text",
} as const;

export const $ValidationError_validation_errors = {
  type: "object",
  properties: {
    field: {
      type: "string",
    },
    message: {
      type: "string",
    },
  },
} as const;
